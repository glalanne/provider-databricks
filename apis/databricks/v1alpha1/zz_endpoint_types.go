// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelInitParameters struct {
	DbsqlVersion *string `json:"dbsqlVersion,omitempty" tf:"dbsql_version,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ChannelObservation struct {
	DbsqlVersion *string `json:"dbsqlVersion,omitempty" tf:"dbsql_version,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ChannelParameters struct {

	// +kubebuilder:validation:Optional
	DbsqlVersion *string `json:"dbsqlVersion,omitempty" tf:"dbsql_version,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CustomTagsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomTagsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomTagsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type EndpointHealthInitParameters struct {
}

type EndpointHealthObservation struct {
	Details *string `json:"details,omitempty" tf:"details,omitempty"`

	FailureReason []FailureReasonObservation `json:"failureReason,omitempty" tf:"failure_reason,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type EndpointHealthParameters struct {
}

type EndpointInitParameters struct {
	AutoStopMins *float64 `json:"autoStopMins,omitempty" tf:"auto_stop_mins,omitempty"`

	Channel []ChannelInitParameters `json:"channel,omitempty" tf:"channel,omitempty"`

	ClusterSize *string `json:"clusterSize,omitempty" tf:"cluster_size,omitempty"`

	DataSourceID *string `json:"dataSourceId,omitempty" tf:"data_source_id,omitempty"`

	EnablePhoton *bool `json:"enablePhoton,omitempty" tf:"enable_photon,omitempty"`

	EnableServerlessCompute *bool `json:"enableServerlessCompute,omitempty" tf:"enable_serverless_compute,omitempty"`

	InstanceProfileArn *string `json:"instanceProfileArn,omitempty" tf:"instance_profile_arn,omitempty"`

	MaxNumClusters *float64 `json:"maxNumClusters,omitempty" tf:"max_num_clusters,omitempty"`

	MinNumClusters *float64 `json:"minNumClusters,omitempty" tf:"min_num_clusters,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SpotInstancePolicy *string `json:"spotInstancePolicy,omitempty" tf:"spot_instance_policy,omitempty"`

	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type EndpointObservation struct {
	AutoStopMins *float64 `json:"autoStopMins,omitempty" tf:"auto_stop_mins,omitempty"`

	Channel []ChannelObservation `json:"channel,omitempty" tf:"channel,omitempty"`

	ClusterSize *string `json:"clusterSize,omitempty" tf:"cluster_size,omitempty"`

	CreatorName *string `json:"creatorName,omitempty" tf:"creator_name,omitempty"`

	DataSourceID *string `json:"dataSourceId,omitempty" tf:"data_source_id,omitempty"`

	EnablePhoton *bool `json:"enablePhoton,omitempty" tf:"enable_photon,omitempty"`

	EnableServerlessCompute *bool `json:"enableServerlessCompute,omitempty" tf:"enable_serverless_compute,omitempty"`

	Health []EndpointHealthObservation `json:"health,omitempty" tf:"health,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceProfileArn *string `json:"instanceProfileArn,omitempty" tf:"instance_profile_arn,omitempty"`

	JdbcURL *string `json:"jdbcUrl,omitempty" tf:"jdbc_url,omitempty"`

	MaxNumClusters *float64 `json:"maxNumClusters,omitempty" tf:"max_num_clusters,omitempty"`

	MinNumClusters *float64 `json:"minNumClusters,omitempty" tf:"min_num_clusters,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NumActiveSessions *float64 `json:"numActiveSessions,omitempty" tf:"num_active_sessions,omitempty"`

	NumClusters *float64 `json:"numClusters,omitempty" tf:"num_clusters,omitempty"`

	OdbcParams []OdbcParamsObservation `json:"odbcParams,omitempty" tf:"odbc_params,omitempty"`

	SpotInstancePolicy *string `json:"spotInstancePolicy,omitempty" tf:"spot_instance_policy,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type EndpointParameters struct {

	// +kubebuilder:validation:Optional
	AutoStopMins *float64 `json:"autoStopMins,omitempty" tf:"auto_stop_mins,omitempty"`

	// +kubebuilder:validation:Optional
	Channel []ChannelParameters `json:"channel,omitempty" tf:"channel,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterSize *string `json:"clusterSize,omitempty" tf:"cluster_size,omitempty"`

	// +kubebuilder:validation:Optional
	DataSourceID *string `json:"dataSourceId,omitempty" tf:"data_source_id,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePhoton *bool `json:"enablePhoton,omitempty" tf:"enable_photon,omitempty"`

	// +kubebuilder:validation:Optional
	EnableServerlessCompute *bool `json:"enableServerlessCompute,omitempty" tf:"enable_serverless_compute,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty" tf:"instance_profile_arn,omitempty"`

	// +kubebuilder:validation:Optional
	MaxNumClusters *float64 `json:"maxNumClusters,omitempty" tf:"max_num_clusters,omitempty"`

	// +kubebuilder:validation:Optional
	MinNumClusters *float64 `json:"minNumClusters,omitempty" tf:"min_num_clusters,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SpotInstancePolicy *string `json:"spotInstancePolicy,omitempty" tf:"spot_instance_policy,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type FailureReasonInitParameters struct {
}

type FailureReasonObservation struct {
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FailureReasonParameters struct {
}

type OdbcParamsInitParameters struct {
}

type OdbcParamsObservation struct {
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type OdbcParamsParameters struct {
}

type TagsInitParameters struct {
	CustomTags []CustomTagsInitParameters `json:"customTags,omitempty" tf:"custom_tags,omitempty"`
}

type TagsObservation struct {
	CustomTags []CustomTagsObservation `json:"customTags,omitempty" tf:"custom_tags,omitempty"`
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	CustomTags []CustomTagsParameters `json:"customTags,omitempty" tf:"custom_tags,omitempty"`
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointInitParameters `json:"initProvider,omitempty"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Endpoint is the Schema for the Endpoints API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterSize) || (has(self.initProvider) && has(self.initProvider.clusterSize))",message="spec.forProvider.clusterSize is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   EndpointSpec   `json:"spec"`
	Status EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	Endpoint_Kind             = "Endpoint"
	Endpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Endpoint_Kind}.String()
	Endpoint_KindAPIVersion   = Endpoint_Kind + "." + CRDGroupVersion.String()
	Endpoint_GroupVersionKind = CRDGroupVersion.WithKind(Endpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
