// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskSpecInitParameters struct {
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	DiskType []DiskTypeInitParameters `json:"diskType,omitempty" tf:"disk_type,omitempty"`
}

type DiskSpecObservation struct {
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	DiskType []DiskTypeObservation `json:"diskType,omitempty" tf:"disk_type,omitempty"`
}

type DiskSpecParameters struct {

	// +kubebuilder:validation:Optional
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	DiskType []DiskTypeParameters `json:"diskType,omitempty" tf:"disk_type,omitempty"`
}

type DiskTypeInitParameters struct {
	AzureDiskVolumeType *string `json:"azureDiskVolumeType,omitempty" tf:"azure_disk_volume_type,omitempty"`

	EBSVolumeType *string `json:"ebsVolumeType,omitempty" tf:"ebs_volume_type,omitempty"`
}

type DiskTypeObservation struct {
	AzureDiskVolumeType *string `json:"azureDiskVolumeType,omitempty" tf:"azure_disk_volume_type,omitempty"`

	EBSVolumeType *string `json:"ebsVolumeType,omitempty" tf:"ebs_volume_type,omitempty"`
}

type DiskTypeParameters struct {

	// +kubebuilder:validation:Optional
	AzureDiskVolumeType *string `json:"azureDiskVolumeType,omitempty" tf:"azure_disk_volume_type,omitempty"`

	// +kubebuilder:validation:Optional
	EBSVolumeType *string `json:"ebsVolumeType,omitempty" tf:"ebs_volume_type,omitempty"`
}

type FleetOnDemandOptionInitParameters struct {
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	InstancePoolsToUseCount *float64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count,omitempty"`
}

type FleetOnDemandOptionObservation struct {
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	InstancePoolsToUseCount *float64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count,omitempty"`
}

type FleetOnDemandOptionParameters struct {

	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePoolsToUseCount *float64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count,omitempty"`
}

type FleetSpotOptionInitParameters struct {
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	InstancePoolsToUseCount *float64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count,omitempty"`
}

type FleetSpotOptionObservation struct {
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy,omitempty"`

	InstancePoolsToUseCount *float64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count,omitempty"`
}

type FleetSpotOptionParameters struct {

	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy" tf:"allocation_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePoolsToUseCount *float64 `json:"instancePoolsToUseCount,omitempty" tf:"instance_pools_to_use_count,omitempty"`
}

type InstancePoolAwsAttributesInitParameters struct {
	Availability *string `json:"availability,omitempty" tf:"availability,omitempty"`

	SpotBidPricePercent *float64 `json:"spotBidPricePercent,omitempty" tf:"spot_bid_price_percent,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type InstancePoolAwsAttributesObservation struct {
	Availability *string `json:"availability,omitempty" tf:"availability,omitempty"`

	SpotBidPricePercent *float64 `json:"spotBidPricePercent,omitempty" tf:"spot_bid_price_percent,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type InstancePoolAwsAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Availability *string `json:"availability,omitempty" tf:"availability,omitempty"`

	// +kubebuilder:validation:Optional
	SpotBidPricePercent *float64 `json:"spotBidPricePercent,omitempty" tf:"spot_bid_price_percent,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type InstancePoolAzureAttributesInitParameters struct {
	Availability *string `json:"availability,omitempty" tf:"availability,omitempty"`

	SpotBidMaxPrice *float64 `json:"spotBidMaxPrice,omitempty" tf:"spot_bid_max_price,omitempty"`
}

type InstancePoolAzureAttributesObservation struct {
	Availability *string `json:"availability,omitempty" tf:"availability,omitempty"`

	SpotBidMaxPrice *float64 `json:"spotBidMaxPrice,omitempty" tf:"spot_bid_max_price,omitempty"`
}

type InstancePoolAzureAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Availability *string `json:"availability,omitempty" tf:"availability,omitempty"`

	// +kubebuilder:validation:Optional
	SpotBidMaxPrice *float64 `json:"spotBidMaxPrice,omitempty" tf:"spot_bid_max_price,omitempty"`
}

type InstancePoolFleetAttributesInitParameters struct {
	FleetOnDemandOption []FleetOnDemandOptionInitParameters `json:"fleetOnDemandOption,omitempty" tf:"fleet_on_demand_option,omitempty"`

	FleetSpotOption []FleetSpotOptionInitParameters `json:"fleetSpotOption,omitempty" tf:"fleet_spot_option,omitempty"`

	LaunchTemplateOverride []LaunchTemplateOverrideInitParameters `json:"launchTemplateOverride,omitempty" tf:"launch_template_override,omitempty"`
}

type InstancePoolFleetAttributesObservation struct {
	FleetOnDemandOption []FleetOnDemandOptionObservation `json:"fleetOnDemandOption,omitempty" tf:"fleet_on_demand_option,omitempty"`

	FleetSpotOption []FleetSpotOptionObservation `json:"fleetSpotOption,omitempty" tf:"fleet_spot_option,omitempty"`

	LaunchTemplateOverride []LaunchTemplateOverrideObservation `json:"launchTemplateOverride,omitempty" tf:"launch_template_override,omitempty"`
}

type InstancePoolFleetAttributesParameters struct {

	// +kubebuilder:validation:Optional
	FleetOnDemandOption []FleetOnDemandOptionParameters `json:"fleetOnDemandOption,omitempty" tf:"fleet_on_demand_option,omitempty"`

	// +kubebuilder:validation:Optional
	FleetSpotOption []FleetSpotOptionParameters `json:"fleetSpotOption,omitempty" tf:"fleet_spot_option,omitempty"`

	// +kubebuilder:validation:Optional
	LaunchTemplateOverride []LaunchTemplateOverrideParameters `json:"launchTemplateOverride" tf:"launch_template_override,omitempty"`
}

type InstancePoolGCPAttributesInitParameters struct {
	GCPAvailability *string `json:"gcpAvailability,omitempty" tf:"gcp_availability,omitempty"`

	LocalSsdCount *float64 `json:"localSsdCount,omitempty" tf:"local_ssd_count,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type InstancePoolGCPAttributesObservation struct {
	GCPAvailability *string `json:"gcpAvailability,omitempty" tf:"gcp_availability,omitempty"`

	LocalSsdCount *float64 `json:"localSsdCount,omitempty" tf:"local_ssd_count,omitempty"`

	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type InstancePoolGCPAttributesParameters struct {

	// +kubebuilder:validation:Optional
	GCPAvailability *string `json:"gcpAvailability,omitempty" tf:"gcp_availability,omitempty"`

	// +kubebuilder:validation:Optional
	LocalSsdCount *float64 `json:"localSsdCount,omitempty" tf:"local_ssd_count,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type InstancePoolInitParameters struct {
	AwsAttributes []InstancePoolAwsAttributesInitParameters `json:"awsAttributes,omitempty" tf:"aws_attributes,omitempty"`

	AzureAttributes []InstancePoolAzureAttributesInitParameters `json:"azureAttributes,omitempty" tf:"azure_attributes,omitempty"`

	// +mapType=granular
	CustomTags map[string]*string `json:"customTags,omitempty" tf:"custom_tags,omitempty"`

	DiskSpec []DiskSpecInitParameters `json:"diskSpec,omitempty" tf:"disk_spec,omitempty"`

	EnableElasticDisk *bool `json:"enableElasticDisk,omitempty" tf:"enable_elastic_disk,omitempty"`

	GCPAttributes []InstancePoolGCPAttributesInitParameters `json:"gcpAttributes,omitempty" tf:"gcp_attributes,omitempty"`

	IdleInstanceAutoterminationMinutes *float64 `json:"idleInstanceAutoterminationMinutes,omitempty" tf:"idle_instance_autotermination_minutes,omitempty"`

	InstancePoolFleetAttributes []InstancePoolFleetAttributesInitParameters `json:"instancePoolFleetAttributes,omitempty" tf:"instance_pool_fleet_attributes,omitempty"`

	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	InstancePoolName *string `json:"instancePoolName,omitempty" tf:"instance_pool_name,omitempty"`

	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity,omitempty"`

	MinIdleInstances *float64 `json:"minIdleInstances,omitempty" tf:"min_idle_instances,omitempty"`

	NodeTypeID *string `json:"nodeTypeId,omitempty" tf:"node_type_id,omitempty"`

	PreloadedDockerImage []PreloadedDockerImageInitParameters `json:"preloadedDockerImage,omitempty" tf:"preloaded_docker_image,omitempty"`

	PreloadedSparkVersions []*string `json:"preloadedSparkVersions,omitempty" tf:"preloaded_spark_versions,omitempty"`
}

type InstancePoolObservation struct {
	AwsAttributes []InstancePoolAwsAttributesObservation `json:"awsAttributes,omitempty" tf:"aws_attributes,omitempty"`

	AzureAttributes []InstancePoolAzureAttributesObservation `json:"azureAttributes,omitempty" tf:"azure_attributes,omitempty"`

	// +mapType=granular
	CustomTags map[string]*string `json:"customTags,omitempty" tf:"custom_tags,omitempty"`

	DiskSpec []DiskSpecObservation `json:"diskSpec,omitempty" tf:"disk_spec,omitempty"`

	EnableElasticDisk *bool `json:"enableElasticDisk,omitempty" tf:"enable_elastic_disk,omitempty"`

	GCPAttributes []InstancePoolGCPAttributesObservation `json:"gcpAttributes,omitempty" tf:"gcp_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IdleInstanceAutoterminationMinutes *float64 `json:"idleInstanceAutoterminationMinutes,omitempty" tf:"idle_instance_autotermination_minutes,omitempty"`

	InstancePoolFleetAttributes []InstancePoolFleetAttributesObservation `json:"instancePoolFleetAttributes,omitempty" tf:"instance_pool_fleet_attributes,omitempty"`

	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	InstancePoolName *string `json:"instancePoolName,omitempty" tf:"instance_pool_name,omitempty"`

	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity,omitempty"`

	MinIdleInstances *float64 `json:"minIdleInstances,omitempty" tf:"min_idle_instances,omitempty"`

	NodeTypeID *string `json:"nodeTypeId,omitempty" tf:"node_type_id,omitempty"`

	PreloadedDockerImage []PreloadedDockerImageObservation `json:"preloadedDockerImage,omitempty" tf:"preloaded_docker_image,omitempty"`

	PreloadedSparkVersions []*string `json:"preloadedSparkVersions,omitempty" tf:"preloaded_spark_versions,omitempty"`
}

type InstancePoolParameters struct {

	// +kubebuilder:validation:Optional
	AwsAttributes []InstancePoolAwsAttributesParameters `json:"awsAttributes,omitempty" tf:"aws_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	AzureAttributes []InstancePoolAzureAttributesParameters `json:"azureAttributes,omitempty" tf:"azure_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomTags map[string]*string `json:"customTags,omitempty" tf:"custom_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DiskSpec []DiskSpecParameters `json:"diskSpec,omitempty" tf:"disk_spec,omitempty"`

	// +kubebuilder:validation:Optional
	EnableElasticDisk *bool `json:"enableElasticDisk,omitempty" tf:"enable_elastic_disk,omitempty"`

	// +kubebuilder:validation:Optional
	GCPAttributes []InstancePoolGCPAttributesParameters `json:"gcpAttributes,omitempty" tf:"gcp_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	IdleInstanceAutoterminationMinutes *float64 `json:"idleInstanceAutoterminationMinutes,omitempty" tf:"idle_instance_autotermination_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePoolFleetAttributes []InstancePoolFleetAttributesParameters `json:"instancePoolFleetAttributes,omitempty" tf:"instance_pool_fleet_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePoolName *string `json:"instancePoolName,omitempty" tf:"instance_pool_name,omitempty"`

	// +kubebuilder:validation:Optional
	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity,omitempty"`

	// +kubebuilder:validation:Optional
	MinIdleInstances *float64 `json:"minIdleInstances,omitempty" tf:"min_idle_instances,omitempty"`

	// +kubebuilder:validation:Optional
	NodeTypeID *string `json:"nodeTypeId,omitempty" tf:"node_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	PreloadedDockerImage []PreloadedDockerImageParameters `json:"preloadedDockerImage,omitempty" tf:"preloaded_docker_image,omitempty"`

	// +kubebuilder:validation:Optional
	PreloadedSparkVersions []*string `json:"preloadedSparkVersions,omitempty" tf:"preloaded_spark_versions,omitempty"`
}

type LaunchTemplateOverrideInitParameters struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`
}

type LaunchTemplateOverrideObservation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`
}

type LaunchTemplateOverrideParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType" tf:"instance_type,omitempty"`
}

type PreloadedDockerImageBasicAuthInitParameters struct {
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PreloadedDockerImageBasicAuthObservation struct {
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PreloadedDockerImageBasicAuthParameters struct {

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type PreloadedDockerImageInitParameters struct {
	BasicAuth []PreloadedDockerImageBasicAuthInitParameters `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type PreloadedDockerImageObservation struct {
	BasicAuth []PreloadedDockerImageBasicAuthObservation `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type PreloadedDockerImageParameters struct {

	// +kubebuilder:validation:Optional
	BasicAuth []PreloadedDockerImageBasicAuthParameters `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

// InstancePoolSpec defines the desired state of InstancePool
type InstancePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstancePoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstancePoolInitParameters `json:"initProvider,omitempty"`
}

// InstancePoolStatus defines the observed state of InstancePool.
type InstancePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstancePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InstancePool is the Schema for the InstancePools API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type InstancePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idleInstanceAutoterminationMinutes) || (has(self.initProvider) && has(self.initProvider.idleInstanceAutoterminationMinutes))",message="spec.forProvider.idleInstanceAutoterminationMinutes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instancePoolName) || (has(self.initProvider) && has(self.initProvider.instancePoolName))",message="spec.forProvider.instancePoolName is a required parameter"
	Spec   InstancePoolSpec   `json:"spec"`
	Status InstancePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstancePoolList contains a list of InstancePools
type InstancePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstancePool `json:"items"`
}

// Repository type metadata.
var (
	InstancePool_Kind             = "InstancePool"
	InstancePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstancePool_Kind}.String()
	InstancePool_KindAPIVersion   = InstancePool_Kind + "." + CRDGroupVersion.String()
	InstancePool_GroupVersionKind = CRDGroupVersion.WithKind(InstancePool_Kind)
)

func init() {
	SchemeBuilder.Register(&InstancePool{}, &InstancePoolList{})
}
