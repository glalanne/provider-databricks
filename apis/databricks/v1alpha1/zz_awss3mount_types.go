// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsS3MountInitParameters struct {
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	InstanceProfile *string `json:"instanceProfile,omitempty" tf:"instance_profile,omitempty"`

	MountName *string `json:"mountName,omitempty" tf:"mount_name,omitempty"`

	S3BucketName *string `json:"s3BucketName,omitempty" tf:"s3_bucket_name,omitempty"`
}

type AwsS3MountObservation struct {
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceProfile *string `json:"instanceProfile,omitempty" tf:"instance_profile,omitempty"`

	MountName *string `json:"mountName,omitempty" tf:"mount_name,omitempty"`

	S3BucketName *string `json:"s3BucketName,omitempty" tf:"s3_bucket_name,omitempty"`

	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type AwsS3MountParameters struct {

	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceProfile *string `json:"instanceProfile,omitempty" tf:"instance_profile,omitempty"`

	// +kubebuilder:validation:Optional
	MountName *string `json:"mountName,omitempty" tf:"mount_name,omitempty"`

	// +kubebuilder:validation:Optional
	S3BucketName *string `json:"s3BucketName,omitempty" tf:"s3_bucket_name,omitempty"`
}

// AwsS3MountSpec defines the desired state of AwsS3Mount
type AwsS3MountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AwsS3MountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AwsS3MountInitParameters `json:"initProvider,omitempty"`
}

// AwsS3MountStatus defines the observed state of AwsS3Mount.
type AwsS3MountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AwsS3MountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AwsS3Mount is the Schema for the AwsS3Mounts API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type AwsS3Mount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mountName) || (has(self.initProvider) && has(self.initProvider.mountName))",message="spec.forProvider.mountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.s3BucketName) || (has(self.initProvider) && has(self.initProvider.s3BucketName))",message="spec.forProvider.s3BucketName is a required parameter"
	Spec   AwsS3MountSpec   `json:"spec"`
	Status AwsS3MountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AwsS3MountList contains a list of AwsS3Mounts
type AwsS3MountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AwsS3Mount `json:"items"`
}

// Repository type metadata.
var (
	AwsS3Mount_Kind             = "AwsS3Mount"
	AwsS3Mount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AwsS3Mount_Kind}.String()
	AwsS3Mount_KindAPIVersion   = AwsS3Mount_Kind + "." + CRDGroupVersion.String()
	AwsS3Mount_GroupVersionKind = CRDGroupVersion.WithKind(AwsS3Mount_Kind)
)

func init() {
	SchemeBuilder.Register(&AwsS3Mount{}, &AwsS3MountList{})
}
