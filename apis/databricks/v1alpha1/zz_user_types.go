// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// identifier for use in databricks_access_control_rule_set, e.g. users/mr.foo@example.com.
	ACLPrincipalID *string `json:"aclPrincipalId,omitempty" tf:"acl_principal_id,omitempty"`

	// Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks_permissions and cluster_id argument. Everyone without allow_cluster_create argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
	AllowClusterCreate *bool `json:"allowClusterCreate,omitempty" tf:"allow_cluster_create,omitempty"`

	// Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks_permissions and instance_pool_id argument.
	AllowInstancePoolCreate *bool `json:"allowInstancePoolCreate,omitempty" tf:"allow_instance_pool_create,omitempty"`

	// This is a field to allow the group to have access to Databricks SQL feature in User Interface and through databricks_sql_endpoint.
	DatabricksSQLAccess *bool `json:"databricksSqlAccess,omitempty" tf:"databricks_sql_access,omitempty"`

	// Deactivate the user when deleting the resource, rather than deleting the user entirely. Defaults to true when the provider is configured at the account-level and false when configured at the workspace-level. This flag is exclusive to force_delete_repos and force_delete_home_dir flags.
	DisableAsUserDeletion *bool `json:"disableAsUserDeletion,omitempty" tf:"disable_as_user_deletion,omitempty"`

	// This is an alias for the username that can be the full name of the user.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the user in an external identity provider.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// This functionality is experimental and is designed to simplify corner cases, like Azure Active Directory synchronisation.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// This flag determines whether the user's home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
	ForceDeleteHomeDir *bool `json:"forceDeleteHomeDir,omitempty" tf:"force_delete_home_dir,omitempty"`

	// This flag determines whether the user's repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
	ForceDeleteRepos *bool `json:"forceDeleteRepos,omitempty" tf:"force_delete_repos,omitempty"`

	// Home folder of the user, e.g. /Users/mr.foo@example.com.
	Home *string `json:"home,omitempty" tf:"home,omitempty"`

	// Personal Repos location of the user, e.g. /Repos/mr.foo@example.com.
	Repos *string `json:"repos,omitempty" tf:"repos,omitempty"`

	// This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	WorkspaceAccess *bool `json:"workspaceAccess,omitempty" tf:"workspace_access,omitempty"`
}

type UserObservation struct {

	// identifier for use in databricks_access_control_rule_set, e.g. users/mr.foo@example.com.
	ACLPrincipalID *string `json:"aclPrincipalId,omitempty" tf:"acl_principal_id,omitempty"`

	// Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks_permissions and cluster_id argument. Everyone without allow_cluster_create argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
	AllowClusterCreate *bool `json:"allowClusterCreate,omitempty" tf:"allow_cluster_create,omitempty"`

	// Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks_permissions and instance_pool_id argument.
	AllowInstancePoolCreate *bool `json:"allowInstancePoolCreate,omitempty" tf:"allow_instance_pool_create,omitempty"`

	// This is a field to allow the group to have access to Databricks SQL feature in User Interface and through databricks_sql_endpoint.
	DatabricksSQLAccess *bool `json:"databricksSqlAccess,omitempty" tf:"databricks_sql_access,omitempty"`

	// Deactivate the user when deleting the resource, rather than deleting the user entirely. Defaults to true when the provider is configured at the account-level and false when configured at the workspace-level. This flag is exclusive to force_delete_repos and force_delete_home_dir flags.
	DisableAsUserDeletion *bool `json:"disableAsUserDeletion,omitempty" tf:"disable_as_user_deletion,omitempty"`

	// This is an alias for the username that can be the full name of the user.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the user in an external identity provider.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// This functionality is experimental and is designed to simplify corner cases, like Azure Active Directory synchronisation.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// This flag determines whether the user's home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
	ForceDeleteHomeDir *bool `json:"forceDeleteHomeDir,omitempty" tf:"force_delete_home_dir,omitempty"`

	// This flag determines whether the user's repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
	ForceDeleteRepos *bool `json:"forceDeleteRepos,omitempty" tf:"force_delete_repos,omitempty"`

	// Home folder of the user, e.g. /Users/mr.foo@example.com.
	Home *string `json:"home,omitempty" tf:"home,omitempty"`

	// Canonical unique identifier for the user.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Personal Repos location of the user, e.g. /Repos/mr.foo@example.com.
	Repos *string `json:"repos,omitempty" tf:"repos,omitempty"`

	// This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	WorkspaceAccess *bool `json:"workspaceAccess,omitempty" tf:"workspace_access,omitempty"`
}

type UserParameters struct {

	// identifier for use in databricks_access_control_rule_set, e.g. users/mr.foo@example.com.
	// +kubebuilder:validation:Optional
	ACLPrincipalID *string `json:"aclPrincipalId,omitempty" tf:"acl_principal_id,omitempty"`

	// Either user is active or not. True by default, but can be set to false in case of user deactivation with preserving user assets.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Allow the user to have cluster create privileges. Defaults to false. More fine grained permissions could be assigned with databricks_permissions and cluster_id argument. Everyone without allow_cluster_create argument set, but with permission to use Cluster Policy would be able to create clusters, but within boundaries of that specific policy.
	// +kubebuilder:validation:Optional
	AllowClusterCreate *bool `json:"allowClusterCreate,omitempty" tf:"allow_cluster_create,omitempty"`

	// Allow the user to have instance pool create privileges. Defaults to false. More fine grained permissions could be assigned with databricks_permissions and instance_pool_id argument.
	// +kubebuilder:validation:Optional
	AllowInstancePoolCreate *bool `json:"allowInstancePoolCreate,omitempty" tf:"allow_instance_pool_create,omitempty"`

	// This is a field to allow the group to have access to Databricks SQL feature in User Interface and through databricks_sql_endpoint.
	// +kubebuilder:validation:Optional
	DatabricksSQLAccess *bool `json:"databricksSqlAccess,omitempty" tf:"databricks_sql_access,omitempty"`

	// Deactivate the user when deleting the resource, rather than deleting the user entirely. Defaults to true when the provider is configured at the account-level and false when configured at the workspace-level. This flag is exclusive to force_delete_repos and force_delete_home_dir flags.
	// +kubebuilder:validation:Optional
	DisableAsUserDeletion *bool `json:"disableAsUserDeletion,omitempty" tf:"disable_as_user_deletion,omitempty"`

	// This is an alias for the username that can be the full name of the user.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the user in an external identity provider.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// This functionality is experimental and is designed to simplify corner cases, like Azure Active Directory synchronisation.
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// This flag determines whether the user's home directory is deleted when the user is deleted. It will have not impact when in the accounts SCIM API. False by default.
	// +kubebuilder:validation:Optional
	ForceDeleteHomeDir *bool `json:"forceDeleteHomeDir,omitempty" tf:"force_delete_home_dir,omitempty"`

	// This flag determines whether the user's repo directory is deleted when the user is deleted. It will have no impact when in the accounts SCIM API. False by default.
	// +kubebuilder:validation:Optional
	ForceDeleteRepos *bool `json:"forceDeleteRepos,omitempty" tf:"force_delete_repos,omitempty"`

	// Home folder of the user, e.g. /Users/mr.foo@example.com.
	// +kubebuilder:validation:Optional
	Home *string `json:"home,omitempty" tf:"home,omitempty"`

	// Personal Repos location of the user, e.g. /Repos/mr.foo@example.com.
	// +kubebuilder:validation:Optional
	Repos *string `json:"repos,omitempty" tf:"repos,omitempty"`

	// This is the username of the given user and will be their form of access and identity.  Provided username will be converted to lower case if it contains upper case characters.
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// +kubebuilder:validation:Optional
	WorkspaceAccess *bool `json:"workspaceAccess,omitempty" tf:"workspace_access,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. ""subcategory: "Security"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
