// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectPartitionInitParameters struct {
	Value []ObjectPartitionValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ObjectPartitionObservation struct {
	Value []ObjectPartitionValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ObjectPartitionParameters struct {

	// +kubebuilder:validation:Optional
	Value []ObjectPartitionValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ObjectPartitionValueInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	RecipientPropertyKey *string `json:"recipientPropertyKey,omitempty" tf:"recipient_property_key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ObjectPartitionValueObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	RecipientPropertyKey *string `json:"recipientPropertyKey,omitempty" tf:"recipient_property_key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ObjectPartitionValueParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// +kubebuilder:validation:Optional
	RecipientPropertyKey *string `json:"recipientPropertyKey,omitempty" tf:"recipient_property_key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SharePluginframeworkInitParameters struct {
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	EffectiveOwner *string `json:"effectiveOwner,omitempty" tf:"effective_owner,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Object []SharePluginframeworkObjectInitParameters `json:"object,omitempty" tf:"object,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	StorageLocation *string `json:"storageLocation,omitempty" tf:"storage_location,omitempty"`

	StorageRoot *string `json:"storageRoot,omitempty" tf:"storage_root,omitempty"`

	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`
}

type SharePluginframeworkObjectInitParameters struct {
	AddedAt *float64 `json:"addedAt,omitempty" tf:"added_at,omitempty"`

	AddedBy *string `json:"addedBy,omitempty" tf:"added_by,omitempty"`

	CdfEnabled *bool `json:"cdfEnabled,omitempty" tf:"cdf_enabled,omitempty"`

	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	DataObjectType *string `json:"dataObjectType,omitempty" tf:"data_object_type,omitempty"`

	EffectiveCdfEnabled *bool `json:"effectiveCdfEnabled,omitempty" tf:"effective_cdf_enabled,omitempty"`

	EffectiveHistoryDataSharingStatus *string `json:"effectiveHistoryDataSharingStatus,omitempty" tf:"effective_history_data_sharing_status,omitempty"`

	EffectiveSharedAs *string `json:"effectiveSharedAs,omitempty" tf:"effective_shared_as,omitempty"`

	EffectiveStartVersion *float64 `json:"effectiveStartVersion,omitempty" tf:"effective_start_version,omitempty"`

	HistoryDataSharingStatus *string `json:"historyDataSharingStatus,omitempty" tf:"history_data_sharing_status,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Partition []ObjectPartitionInitParameters `json:"partition,omitempty" tf:"partition,omitempty"`

	SharedAs *string `json:"sharedAs,omitempty" tf:"shared_as,omitempty"`

	StartVersion *float64 `json:"startVersion,omitempty" tf:"start_version,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StringSharedAs *string `json:"stringSharedAs,omitempty" tf:"string_shared_as,omitempty"`
}

type SharePluginframeworkObjectObservation struct {
	AddedAt *float64 `json:"addedAt,omitempty" tf:"added_at,omitempty"`

	AddedBy *string `json:"addedBy,omitempty" tf:"added_by,omitempty"`

	CdfEnabled *bool `json:"cdfEnabled,omitempty" tf:"cdf_enabled,omitempty"`

	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	DataObjectType *string `json:"dataObjectType,omitempty" tf:"data_object_type,omitempty"`

	EffectiveCdfEnabled *bool `json:"effectiveCdfEnabled,omitempty" tf:"effective_cdf_enabled,omitempty"`

	EffectiveHistoryDataSharingStatus *string `json:"effectiveHistoryDataSharingStatus,omitempty" tf:"effective_history_data_sharing_status,omitempty"`

	EffectiveSharedAs *string `json:"effectiveSharedAs,omitempty" tf:"effective_shared_as,omitempty"`

	EffectiveStartVersion *float64 `json:"effectiveStartVersion,omitempty" tf:"effective_start_version,omitempty"`

	HistoryDataSharingStatus *string `json:"historyDataSharingStatus,omitempty" tf:"history_data_sharing_status,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Partition []ObjectPartitionObservation `json:"partition,omitempty" tf:"partition,omitempty"`

	SharedAs *string `json:"sharedAs,omitempty" tf:"shared_as,omitempty"`

	StartVersion *float64 `json:"startVersion,omitempty" tf:"start_version,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	StringSharedAs *string `json:"stringSharedAs,omitempty" tf:"string_shared_as,omitempty"`
}

type SharePluginframeworkObjectParameters struct {

	// +kubebuilder:validation:Optional
	AddedAt *float64 `json:"addedAt,omitempty" tf:"added_at,omitempty"`

	// +kubebuilder:validation:Optional
	AddedBy *string `json:"addedBy,omitempty" tf:"added_by,omitempty"`

	// +kubebuilder:validation:Optional
	CdfEnabled *bool `json:"cdfEnabled,omitempty" tf:"cdf_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// +kubebuilder:validation:Optional
	DataObjectType *string `json:"dataObjectType" tf:"data_object_type,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveCdfEnabled *bool `json:"effectiveCdfEnabled,omitempty" tf:"effective_cdf_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveHistoryDataSharingStatus *string `json:"effectiveHistoryDataSharingStatus,omitempty" tf:"effective_history_data_sharing_status,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveSharedAs *string `json:"effectiveSharedAs,omitempty" tf:"effective_shared_as,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveStartVersion *float64 `json:"effectiveStartVersion,omitempty" tf:"effective_start_version,omitempty"`

	// +kubebuilder:validation:Optional
	HistoryDataSharingStatus *string `json:"historyDataSharingStatus,omitempty" tf:"history_data_sharing_status,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Partition []ObjectPartitionParameters `json:"partition,omitempty" tf:"partition,omitempty"`

	// +kubebuilder:validation:Optional
	SharedAs *string `json:"sharedAs,omitempty" tf:"shared_as,omitempty"`

	// +kubebuilder:validation:Optional
	StartVersion *float64 `json:"startVersion,omitempty" tf:"start_version,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	StringSharedAs *string `json:"stringSharedAs,omitempty" tf:"string_shared_as,omitempty"`
}

type SharePluginframeworkObservation struct {
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	EffectiveOwner *string `json:"effectiveOwner,omitempty" tf:"effective_owner,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Object []SharePluginframeworkObjectObservation `json:"object,omitempty" tf:"object,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	StorageLocation *string `json:"storageLocation,omitempty" tf:"storage_location,omitempty"`

	StorageRoot *string `json:"storageRoot,omitempty" tf:"storage_root,omitempty"`

	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`
}

type SharePluginframeworkParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// +kubebuilder:validation:Optional
	EffectiveOwner *string `json:"effectiveOwner,omitempty" tf:"effective_owner,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Object []SharePluginframeworkObjectParameters `json:"object,omitempty" tf:"object,omitempty"`

	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// +kubebuilder:validation:Optional
	StorageLocation *string `json:"storageLocation,omitempty" tf:"storage_location,omitempty"`

	// +kubebuilder:validation:Optional
	StorageRoot *string `json:"storageRoot,omitempty" tf:"storage_root,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedAt *float64 `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`
}

// SharePluginframeworkSpec defines the desired state of SharePluginframework
type SharePluginframeworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SharePluginframeworkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SharePluginframeworkInitParameters `json:"initProvider,omitempty"`
}

// SharePluginframeworkStatus defines the observed state of SharePluginframework.
type SharePluginframeworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SharePluginframeworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SharePluginframework is the Schema for the SharePluginframeworks API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type SharePluginframework struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SharePluginframeworkSpec   `json:"spec"`
	Status SharePluginframeworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharePluginframeworkList contains a list of SharePluginframeworks
type SharePluginframeworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharePluginframework `json:"items"`
}

// Repository type metadata.
var (
	SharePluginframework_Kind             = "SharePluginframework"
	SharePluginframework_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SharePluginframework_Kind}.String()
	SharePluginframework_KindAPIVersion   = SharePluginframework_Kind + "." + CRDGroupVersion.String()
	SharePluginframework_GroupVersionKind = CRDGroupVersion.WithKind(SharePluginframework_Kind)
)

func init() {
	SchemeBuilder.Register(&SharePluginframework{}, &SharePluginframeworkList{})
}
