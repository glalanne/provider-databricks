// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureBlobMountInitParameters struct {
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	Directory *string `json:"directory,omitempty" tf:"directory,omitempty"`

	MountName *string `json:"mountName,omitempty" tf:"mount_name,omitempty"`

	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name,omitempty"`

	TokenSecretKeySecretRef v1.SecretKeySelector `json:"tokenSecretKeySecretRef" tf:"-"`

	TokenSecretScope *string `json:"tokenSecretScope,omitempty" tf:"token_secret_scope,omitempty"`
}

type AzureBlobMountObservation struct {
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	Directory *string `json:"directory,omitempty" tf:"directory,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MountName *string `json:"mountName,omitempty" tf:"mount_name,omitempty"`

	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name,omitempty"`

	TokenSecretScope *string `json:"tokenSecretScope,omitempty" tf:"token_secret_scope,omitempty"`
}

type AzureBlobMountParameters struct {

	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// +kubebuilder:validation:Optional
	Directory *string `json:"directory,omitempty" tf:"directory,omitempty"`

	// +kubebuilder:validation:Optional
	MountName *string `json:"mountName,omitempty" tf:"mount_name,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountName *string `json:"storageAccountName,omitempty" tf:"storage_account_name,omitempty"`

	// +kubebuilder:validation:Optional
	TokenSecretKeySecretRef v1.SecretKeySelector `json:"tokenSecretKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	TokenSecretScope *string `json:"tokenSecretScope,omitempty" tf:"token_secret_scope,omitempty"`
}

// AzureBlobMountSpec defines the desired state of AzureBlobMount
type AzureBlobMountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AzureBlobMountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AzureBlobMountInitParameters `json:"initProvider,omitempty"`
}

// AzureBlobMountStatus defines the observed state of AzureBlobMount.
type AzureBlobMountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AzureBlobMountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AzureBlobMount is the Schema for the AzureBlobMounts API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type AzureBlobMount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authType) || (has(self.initProvider) && has(self.initProvider.authType))",message="spec.forProvider.authType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerName) || (has(self.initProvider) && has(self.initProvider.containerName))",message="spec.forProvider.containerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mountName) || (has(self.initProvider) && has(self.initProvider.mountName))",message="spec.forProvider.mountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageAccountName) || (has(self.initProvider) && has(self.initProvider.storageAccountName))",message="spec.forProvider.storageAccountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenSecretKeySecretRef)",message="spec.forProvider.tokenSecretKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenSecretScope) || (has(self.initProvider) && has(self.initProvider.tokenSecretScope))",message="spec.forProvider.tokenSecretScope is a required parameter"
	Spec   AzureBlobMountSpec   `json:"spec"`
	Status AzureBlobMountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AzureBlobMountList contains a list of AzureBlobMounts
type AzureBlobMountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AzureBlobMount `json:"items"`
}

// Repository type metadata.
var (
	AzureBlobMount_Kind             = "AzureBlobMount"
	AzureBlobMount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AzureBlobMount_Kind}.String()
	AzureBlobMount_KindAPIVersion   = AzureBlobMount_Kind + "." + CRDGroupVersion.String()
	AzureBlobMount_GroupVersionKind = CRDGroupVersion.WithKind(AzureBlobMount_Kind)
)

func init() {
	SchemeBuilder.Register(&AzureBlobMount{}, &AzureBlobMountList{})
}
