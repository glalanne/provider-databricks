// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ArtifactAllowlistInitParameters struct {
	ArtifactMatcher []ArtifactMatcherInitParameters `json:"artifactMatcher,omitempty" tf:"artifact_matcher,omitempty"`

	// The artifact type of the allowlist. Can be INIT_SCRIPT, LIBRARY_JAR or LIBRARY_MAVEN. Change forces creation of a new resource.
	ArtifactType *string `json:"artifactType,omitempty" tf:"artifact_type,omitempty"`

	// Time at which this artifact allowlist was set.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Identity that set the artifact allowlist.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// ID of the parent metastore.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`
}

type ArtifactAllowlistObservation struct {
	ArtifactMatcher []ArtifactMatcherObservation `json:"artifactMatcher,omitempty" tf:"artifact_matcher,omitempty"`

	// The artifact type of the allowlist. Can be INIT_SCRIPT, LIBRARY_JAR or LIBRARY_MAVEN. Change forces creation of a new resource.
	ArtifactType *string `json:"artifactType,omitempty" tf:"artifact_type,omitempty"`

	// Time at which this artifact allowlist was set.
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Identity that set the artifact allowlist.
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// ID of the artifact allow list in form of metastore_id|artifact_type.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the parent metastore.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`
}

type ArtifactAllowlistParameters struct {

	// +kubebuilder:validation:Optional
	ArtifactMatcher []ArtifactMatcherParameters `json:"artifactMatcher,omitempty" tf:"artifact_matcher,omitempty"`

	// The artifact type of the allowlist. Can be INIT_SCRIPT, LIBRARY_JAR or LIBRARY_MAVEN. Change forces creation of a new resource.
	// +kubebuilder:validation:Optional
	ArtifactType *string `json:"artifactType,omitempty" tf:"artifact_type,omitempty"`

	// Time at which this artifact allowlist was set.
	// +kubebuilder:validation:Optional
	CreatedAt *float64 `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Identity that set the artifact allowlist.
	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// ID of the parent metastore.
	// +kubebuilder:validation:Optional
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`
}

type ArtifactMatcherInitParameters struct {

	// The artifact path or maven coordinate.
	Artifact *string `json:"artifact,omitempty" tf:"artifact,omitempty"`

	// The pattern matching type of the artifact. Only PREFIX_MATCH is supported.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`
}

type ArtifactMatcherObservation struct {

	// The artifact path or maven coordinate.
	Artifact *string `json:"artifact,omitempty" tf:"artifact,omitempty"`

	// The pattern matching type of the artifact. Only PREFIX_MATCH is supported.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`
}

type ArtifactMatcherParameters struct {

	// The artifact path or maven coordinate.
	// +kubebuilder:validation:Optional
	Artifact *string `json:"artifact" tf:"artifact,omitempty"`

	// The pattern matching type of the artifact. Only PREFIX_MATCH is supported.
	// +kubebuilder:validation:Optional
	MatchType *string `json:"matchType" tf:"match_type,omitempty"`
}

// ArtifactAllowlistSpec defines the desired state of ArtifactAllowlist
type ArtifactAllowlistSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ArtifactAllowlistParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ArtifactAllowlistInitParameters `json:"initProvider,omitempty"`
}

// ArtifactAllowlistStatus defines the observed state of ArtifactAllowlist.
type ArtifactAllowlistStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ArtifactAllowlistObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ArtifactAllowlist is the Schema for the ArtifactAllowlists API. ""subcategory: "Unity Catalog"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type ArtifactAllowlist struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.artifactMatcher) || (has(self.initProvider) && has(self.initProvider.artifactMatcher))",message="spec.forProvider.artifactMatcher is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.artifactType) || (has(self.initProvider) && has(self.initProvider.artifactType))",message="spec.forProvider.artifactType is a required parameter"
	Spec   ArtifactAllowlistSpec   `json:"spec"`
	Status ArtifactAllowlistStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ArtifactAllowlistList contains a list of ArtifactAllowlists
type ArtifactAllowlistList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ArtifactAllowlist `json:"items"`
}

// Repository type metadata.
var (
	ArtifactAllowlist_Kind             = "ArtifactAllowlist"
	ArtifactAllowlist_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ArtifactAllowlist_Kind}.String()
	ArtifactAllowlist_KindAPIVersion   = ArtifactAllowlist_Kind + "." + CRDGroupVersion.String()
	ArtifactAllowlist_GroupVersionKind = CRDGroupVersion.WithKind(ArtifactAllowlist_Kind)
)

func init() {
	SchemeBuilder.Register(&ArtifactAllowlist{}, &ArtifactAllowlistList{})
}
