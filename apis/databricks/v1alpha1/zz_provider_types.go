// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProviderInitParameters struct {

	// The delta sharing authentication type. Valid values are TOKEN.
	AuthenticationType *string `json:"authenticationType,omitempty" tf:"authentication_type,omitempty"`

	// Description about the provider.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Name of provider. Change forces creation of a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the json file that is created from a recipient url.
	RecipientProfileStrSecretRef v1.SecretKeySelector `json:"recipientProfileStrSecretRef" tf:"-"`
}

type ProviderObservation struct {

	// The delta sharing authentication type. Valid values are TOKEN.
	AuthenticationType *string `json:"authenticationType,omitempty" tf:"authentication_type,omitempty"`

	// Description about the provider.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// ID of this provider - same as the name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of provider. Change forces creation of a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProviderParameters struct {

	// The delta sharing authentication type. Valid values are TOKEN.
	// +kubebuilder:validation:Optional
	AuthenticationType *string `json:"authenticationType,omitempty" tf:"authentication_type,omitempty"`

	// Description about the provider.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Name of provider. Change forces creation of a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the json file that is created from a recipient url.
	// +kubebuilder:validation:Optional
	RecipientProfileStrSecretRef v1.SecretKeySelector `json:"recipientProfileStrSecretRef" tf:"-"`
}

// ProviderSpec defines the desired state of Provider
type ProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProviderInitParameters `json:"initProvider,omitempty"`
}

// ProviderStatus defines the observed state of Provider.
type ProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Provider is the Schema for the Providers API. ""subcategory: "Delta Sharing"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type Provider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authenticationType) || (has(self.initProvider) && has(self.initProvider.authenticationType))",message="spec.forProvider.authenticationType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recipientProfileStrSecretRef)",message="spec.forProvider.recipientProfileStrSecretRef is a required parameter"
	Spec   ProviderSpec   `json:"spec"`
	Status ProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderList contains a list of Providers
type ProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Provider `json:"items"`
}

// Repository type metadata.
var (
	Provider_Kind             = "Provider"
	Provider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Provider_Kind}.String()
	Provider_KindAPIVersion   = Provider_Kind + "." + CRDGroupVersion.String()
	Provider_GroupVersionKind = CRDGroupVersion.WithKind(Provider_Kind)
)

func init() {
	SchemeBuilder.Register(&Provider{}, &ProviderList{})
}
