// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlInitParameters struct {
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	PermissionLevel *string `json:"permissionLevel,omitempty" tf:"permission_level,omitempty"`

	ServicePrincipalName *string `json:"servicePrincipalName,omitempty" tf:"service_principal_name,omitempty"`

	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type AccessControlObservation struct {
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	PermissionLevel *string `json:"permissionLevel,omitempty" tf:"permission_level,omitempty"`

	ServicePrincipalName *string `json:"servicePrincipalName,omitempty" tf:"service_principal_name,omitempty"`

	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type AccessControlParameters struct {

	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// +kubebuilder:validation:Optional
	PermissionLevel *string `json:"permissionLevel,omitempty" tf:"permission_level,omitempty"`

	// +kubebuilder:validation:Optional
	ServicePrincipalName *string `json:"servicePrincipalName,omitempty" tf:"service_principal_name,omitempty"`

	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type PermissionsInitParameters struct {
	AccessControl []AccessControlInitParameters `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	Authorization *string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ClusterPolicyID *string `json:"clusterPolicyId,omitempty" tf:"cluster_policy_id,omitempty"`

	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	DirectoryPath *string `json:"directoryPath,omitempty" tf:"directory_path,omitempty"`

	ExperimentID *string `json:"experimentId,omitempty" tf:"experiment_id,omitempty"`

	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	NotebookID *string `json:"notebookId,omitempty" tf:"notebook_id,omitempty"`

	NotebookPath *string `json:"notebookPath,omitempty" tf:"notebook_path,omitempty"`

	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	RegisteredModelID *string `json:"registeredModelId,omitempty" tf:"registered_model_id,omitempty"`

	RepoID *string `json:"repoId,omitempty" tf:"repo_id,omitempty"`

	RepoPath *string `json:"repoPath,omitempty" tf:"repo_path,omitempty"`

	SQLAlertID *string `json:"sqlAlertId,omitempty" tf:"sql_alert_id,omitempty"`

	SQLDashboardID *string `json:"sqlDashboardId,omitempty" tf:"sql_dashboard_id,omitempty"`

	SQLEndpointID *string `json:"sqlEndpointId,omitempty" tf:"sql_endpoint_id,omitempty"`

	SQLQueryID *string `json:"sqlQueryId,omitempty" tf:"sql_query_id,omitempty"`

	ServingEndpointID *string `json:"servingEndpointId,omitempty" tf:"serving_endpoint_id,omitempty"`

	WorkspaceFileID *string `json:"workspaceFileId,omitempty" tf:"workspace_file_id,omitempty"`

	WorkspaceFilePath *string `json:"workspaceFilePath,omitempty" tf:"workspace_file_path,omitempty"`
}

type PermissionsObservation struct {
	AccessControl []AccessControlObservation `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	Authorization *string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ClusterPolicyID *string `json:"clusterPolicyId,omitempty" tf:"cluster_policy_id,omitempty"`

	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	DirectoryPath *string `json:"directoryPath,omitempty" tf:"directory_path,omitempty"`

	ExperimentID *string `json:"experimentId,omitempty" tf:"experiment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	NotebookID *string `json:"notebookId,omitempty" tf:"notebook_id,omitempty"`

	NotebookPath *string `json:"notebookPath,omitempty" tf:"notebook_path,omitempty"`

	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	RegisteredModelID *string `json:"registeredModelId,omitempty" tf:"registered_model_id,omitempty"`

	RepoID *string `json:"repoId,omitempty" tf:"repo_id,omitempty"`

	RepoPath *string `json:"repoPath,omitempty" tf:"repo_path,omitempty"`

	SQLAlertID *string `json:"sqlAlertId,omitempty" tf:"sql_alert_id,omitempty"`

	SQLDashboardID *string `json:"sqlDashboardId,omitempty" tf:"sql_dashboard_id,omitempty"`

	SQLEndpointID *string `json:"sqlEndpointId,omitempty" tf:"sql_endpoint_id,omitempty"`

	SQLQueryID *string `json:"sqlQueryId,omitempty" tf:"sql_query_id,omitempty"`

	ServingEndpointID *string `json:"servingEndpointId,omitempty" tf:"serving_endpoint_id,omitempty"`

	WorkspaceFileID *string `json:"workspaceFileId,omitempty" tf:"workspace_file_id,omitempty"`

	WorkspaceFilePath *string `json:"workspaceFilePath,omitempty" tf:"workspace_file_path,omitempty"`
}

type PermissionsParameters struct {

	// +kubebuilder:validation:Optional
	AccessControl []AccessControlParameters `json:"accessControl,omitempty" tf:"access_control,omitempty"`

	// +kubebuilder:validation:Optional
	Authorization *string `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterPolicyID *string `json:"clusterPolicyId,omitempty" tf:"cluster_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// +kubebuilder:validation:Optional
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	// +kubebuilder:validation:Optional
	DirectoryPath *string `json:"directoryPath,omitempty" tf:"directory_path,omitempty"`

	// +kubebuilder:validation:Optional
	ExperimentID *string `json:"experimentId,omitempty" tf:"experiment_id,omitempty"`

	// +kubebuilder:validation:Optional
	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	JobID *string `json:"jobId,omitempty" tf:"job_id,omitempty"`

	// +kubebuilder:validation:Optional
	NotebookID *string `json:"notebookId,omitempty" tf:"notebook_id,omitempty"`

	// +kubebuilder:validation:Optional
	NotebookPath *string `json:"notebookPath,omitempty" tf:"notebook_path,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// +kubebuilder:validation:Optional
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// +kubebuilder:validation:Optional
	RegisteredModelID *string `json:"registeredModelId,omitempty" tf:"registered_model_id,omitempty"`

	// +kubebuilder:validation:Optional
	RepoID *string `json:"repoId,omitempty" tf:"repo_id,omitempty"`

	// +kubebuilder:validation:Optional
	RepoPath *string `json:"repoPath,omitempty" tf:"repo_path,omitempty"`

	// +kubebuilder:validation:Optional
	SQLAlertID *string `json:"sqlAlertId,omitempty" tf:"sql_alert_id,omitempty"`

	// +kubebuilder:validation:Optional
	SQLDashboardID *string `json:"sqlDashboardId,omitempty" tf:"sql_dashboard_id,omitempty"`

	// +kubebuilder:validation:Optional
	SQLEndpointID *string `json:"sqlEndpointId,omitempty" tf:"sql_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	SQLQueryID *string `json:"sqlQueryId,omitempty" tf:"sql_query_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServingEndpointID *string `json:"servingEndpointId,omitempty" tf:"serving_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	WorkspaceFileID *string `json:"workspaceFileId,omitempty" tf:"workspace_file_id,omitempty"`

	// +kubebuilder:validation:Optional
	WorkspaceFilePath *string `json:"workspaceFilePath,omitempty" tf:"workspace_file_path,omitempty"`
}

// PermissionsSpec defines the desired state of Permissions
type PermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PermissionsInitParameters `json:"initProvider,omitempty"`
}

// PermissionsStatus defines the observed state of Permissions.
type PermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Permissions is the Schema for the Permissionss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type Permissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessControl) || (has(self.initProvider) && has(self.initProvider.accessControl))",message="spec.forProvider.accessControl is a required parameter"
	Spec   PermissionsSpec   `json:"spec"`
	Status PermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionsList contains a list of Permissionss
type PermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permissions `json:"items"`
}

// Repository type metadata.
var (
	Permissions_Kind             = "Permissions"
	Permissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permissions_Kind}.String()
	Permissions_KindAPIVersion   = Permissions_Kind + "." + CRDGroupVersion.String()
	Permissions_GroupVersionKind = CRDGroupVersion.WithKind(Permissions_Kind)
)

func init() {
	SchemeBuilder.Register(&Permissions{}, &PermissionsList{})
}
