// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardInitParameters struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	DashboardChangeDetected *bool `json:"dashboardChangeDetected,omitempty" tf:"dashboard_change_detected,omitempty"`

	// The unique ID of the dashboard.
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// The display name of the dashboard.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Whether to embed credentials in the dashboard. Default is true.
	EmbedCredentials *bool `json:"embedCredentials,omitempty" tf:"embed_credentials,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The path to the dashboard JSON file. Conflicts with serialized_dashboard.
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath *string `json:"parentPath,omitempty" tf:"parent_path,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The contents of the dashboard in serialized string form. Conflicts with file_path.
	SerializedDashboard *string `json:"serializedDashboard,omitempty" tf:"serialized_dashboard,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// The warehouse ID used to run the dashboard.
	WarehouseID *string `json:"warehouseId,omitempty" tf:"warehouse_id,omitempty"`
}

type DashboardObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	DashboardChangeDetected *bool `json:"dashboardChangeDetected,omitempty" tf:"dashboard_change_detected,omitempty"`

	// The unique ID of the dashboard.
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// The display name of the dashboard.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Whether to embed credentials in the dashboard. Default is true.
	EmbedCredentials *bool `json:"embedCredentials,omitempty" tf:"embed_credentials,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The path to the dashboard JSON file. Conflicts with serialized_dashboard.
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// The unique ID of the dashboard.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	ParentPath *string `json:"parentPath,omitempty" tf:"parent_path,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The contents of the dashboard in serialized string form. Conflicts with file_path.
	SerializedDashboard *string `json:"serializedDashboard,omitempty" tf:"serialized_dashboard,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// The warehouse ID used to run the dashboard.
	WarehouseID *string `json:"warehouseId,omitempty" tf:"warehouse_id,omitempty"`
}

type DashboardParameters struct {

	// +kubebuilder:validation:Optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// +kubebuilder:validation:Optional
	DashboardChangeDetected *bool `json:"dashboardChangeDetected,omitempty" tf:"dashboard_change_detected,omitempty"`

	// The unique ID of the dashboard.
	// +kubebuilder:validation:Optional
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// The display name of the dashboard.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Whether to embed credentials in the dashboard. Default is true.
	// +kubebuilder:validation:Optional
	EmbedCredentials *bool `json:"embedCredentials,omitempty" tf:"embed_credentials,omitempty"`

	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The path to the dashboard JSON file. Conflicts with serialized_dashboard.
	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// +kubebuilder:validation:Optional
	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state,omitempty"`

	// +kubebuilder:validation:Optional
	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// The workspace path of the folder containing the dashboard. Includes leading slash and no trailing slash.  If folder doesn't exist, it will be created.
	// +kubebuilder:validation:Optional
	ParentPath *string `json:"parentPath,omitempty" tf:"parent_path,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The contents of the dashboard in serialized string form. Conflicts with file_path.
	// +kubebuilder:validation:Optional
	SerializedDashboard *string `json:"serializedDashboard,omitempty" tf:"serialized_dashboard,omitempty"`

	// +kubebuilder:validation:Optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// The warehouse ID used to run the dashboard.
	// +kubebuilder:validation:Optional
	WarehouseID *string `json:"warehouseId,omitempty" tf:"warehouse_id,omitempty"`
}

// DashboardSpec defines the desired state of Dashboard
type DashboardSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardInitParameters `json:"initProvider,omitempty"`
}

// DashboardStatus defines the observed state of Dashboard.
type DashboardStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Dashboard is the Schema for the Dashboards API. ""subcategory: "Workspace"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,}
type Dashboard struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parentPath) || (has(self.initProvider) && has(self.initProvider.parentPath))",message="spec.forProvider.parentPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.warehouseId) || (has(self.initProvider) && has(self.initProvider.warehouseId))",message="spec.forProvider.warehouseId is a required parameter"
	Spec   DashboardSpec   `json:"spec"`
	Status DashboardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardList contains a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dashboard `json:"items"`
}

// Repository type metadata.
var (
	Dashboard_Kind             = "Dashboard"
	Dashboard_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dashboard_Kind}.String()
	Dashboard_KindAPIVersion   = Dashboard_Kind + "." + CRDGroupVersion.String()
	Dashboard_GroupVersionKind = CRDGroupVersion.WithKind(Dashboard_Kind)
)

func init() {
	SchemeBuilder.Register(&Dashboard{}, &DashboardList{})
}
