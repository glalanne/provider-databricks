// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DateRangeValueDateRangeValueInitParameters struct {

	// end of the date range.
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// begin of the date range.
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type DateRangeValueDateRangeValueObservation struct {

	// end of the date range.
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// begin of the date range.
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type DateRangeValueDateRangeValueParameters struct {

	// end of the date range.
	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// begin of the date range.
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type DateRangeValueInitParameters struct {

	// (Block) Date-range query parameter value. Consists of following attributes (Can only specify one of dynamic_date_range_value or date_range_value):
	DateRangeValue []DateRangeValueDateRangeValueInitParameters `json:"dateRangeValue,omitempty" tf:"date_range_value,omitempty"`

	// (String) Dynamic date-time range value based on current date-time.  Possible values are TODAY, YESTERDAY, THIS_WEEK, THIS_MONTH, THIS_YEAR, LAST_WEEK, LAST_MONTH, LAST_YEAR, LAST_HOUR, LAST_8_HOURS, LAST_24_HOURS, LAST_7_DAYS, LAST_14_DAYS, LAST_30_DAYS, LAST_60_DAYS, LAST_90_DAYS, LAST_12_MONTHS.
	DynamicDateRangeValue *string `json:"dynamicDateRangeValue,omitempty" tf:"dynamic_date_range_value,omitempty"`

	// Date-time precision to format the value into when the query is run.  Possible values are DAY_PRECISION, MINUTE_PRECISION, SECOND_PRECISION.  Defaults to DAY_PRECISION (YYYY-MM-DD).
	Precision *string `json:"precision,omitempty" tf:"precision,omitempty"`

	// Specify what day that starts the week.
	StartDayOfWeek *float64 `json:"startDayOfWeek,omitempty" tf:"start_day_of_week,omitempty"`
}

type DateRangeValueObservation struct {

	// (Block) Date-range query parameter value. Consists of following attributes (Can only specify one of dynamic_date_range_value or date_range_value):
	DateRangeValue []DateRangeValueDateRangeValueObservation `json:"dateRangeValue,omitempty" tf:"date_range_value,omitempty"`

	// (String) Dynamic date-time range value based on current date-time.  Possible values are TODAY, YESTERDAY, THIS_WEEK, THIS_MONTH, THIS_YEAR, LAST_WEEK, LAST_MONTH, LAST_YEAR, LAST_HOUR, LAST_8_HOURS, LAST_24_HOURS, LAST_7_DAYS, LAST_14_DAYS, LAST_30_DAYS, LAST_60_DAYS, LAST_90_DAYS, LAST_12_MONTHS.
	DynamicDateRangeValue *string `json:"dynamicDateRangeValue,omitempty" tf:"dynamic_date_range_value,omitempty"`

	// Date-time precision to format the value into when the query is run.  Possible values are DAY_PRECISION, MINUTE_PRECISION, SECOND_PRECISION.  Defaults to DAY_PRECISION (YYYY-MM-DD).
	Precision *string `json:"precision,omitempty" tf:"precision,omitempty"`

	// Specify what day that starts the week.
	StartDayOfWeek *float64 `json:"startDayOfWeek,omitempty" tf:"start_day_of_week,omitempty"`
}

type DateRangeValueParameters struct {

	// (Block) Date-range query parameter value. Consists of following attributes (Can only specify one of dynamic_date_range_value or date_range_value):
	// +kubebuilder:validation:Optional
	DateRangeValue []DateRangeValueDateRangeValueParameters `json:"dateRangeValue,omitempty" tf:"date_range_value,omitempty"`

	// (String) Dynamic date-time range value based on current date-time.  Possible values are TODAY, YESTERDAY, THIS_WEEK, THIS_MONTH, THIS_YEAR, LAST_WEEK, LAST_MONTH, LAST_YEAR, LAST_HOUR, LAST_8_HOURS, LAST_24_HOURS, LAST_7_DAYS, LAST_14_DAYS, LAST_30_DAYS, LAST_60_DAYS, LAST_90_DAYS, LAST_12_MONTHS.
	// +kubebuilder:validation:Optional
	DynamicDateRangeValue *string `json:"dynamicDateRangeValue,omitempty" tf:"dynamic_date_range_value,omitempty"`

	// Date-time precision to format the value into when the query is run.  Possible values are DAY_PRECISION, MINUTE_PRECISION, SECOND_PRECISION.  Defaults to DAY_PRECISION (YYYY-MM-DD).
	// +kubebuilder:validation:Optional
	Precision *string `json:"precision,omitempty" tf:"precision,omitempty"`

	// Specify what day that starts the week.
	// +kubebuilder:validation:Optional
	StartDayOfWeek *float64 `json:"startDayOfWeek,omitempty" tf:"start_day_of_week,omitempty"`
}

type DateValueInitParameters struct {

	// (Block) Date query parameter value. Consists of following attributes (Can only specify one of dynamic_date_value or date_value):
	DateValue *string `json:"dateValue,omitempty" tf:"date_value,omitempty"`

	// (String) Dynamic date-time value based on current date-time.  Possible values are NOW, YESTERDAY.
	DynamicDateValue *string `json:"dynamicDateValue,omitempty" tf:"dynamic_date_value,omitempty"`

	// Date-time precision to format the value into when the query is run.  Possible values are DAY_PRECISION, MINUTE_PRECISION, SECOND_PRECISION.  Defaults to DAY_PRECISION (YYYY-MM-DD).
	Precision *string `json:"precision,omitempty" tf:"precision,omitempty"`
}

type DateValueObservation struct {

	// (Block) Date query parameter value. Consists of following attributes (Can only specify one of dynamic_date_value or date_value):
	DateValue *string `json:"dateValue,omitempty" tf:"date_value,omitempty"`

	// (String) Dynamic date-time value based on current date-time.  Possible values are NOW, YESTERDAY.
	DynamicDateValue *string `json:"dynamicDateValue,omitempty" tf:"dynamic_date_value,omitempty"`

	// Date-time precision to format the value into when the query is run.  Possible values are DAY_PRECISION, MINUTE_PRECISION, SECOND_PRECISION.  Defaults to DAY_PRECISION (YYYY-MM-DD).
	Precision *string `json:"precision,omitempty" tf:"precision,omitempty"`
}

type DateValueParameters struct {

	// (Block) Date query parameter value. Consists of following attributes (Can only specify one of dynamic_date_value or date_value):
	// +kubebuilder:validation:Optional
	DateValue *string `json:"dateValue,omitempty" tf:"date_value,omitempty"`

	// (String) Dynamic date-time value based on current date-time.  Possible values are NOW, YESTERDAY.
	// +kubebuilder:validation:Optional
	DynamicDateValue *string `json:"dynamicDateValue,omitempty" tf:"dynamic_date_value,omitempty"`

	// Date-time precision to format the value into when the query is run.  Possible values are DAY_PRECISION, MINUTE_PRECISION, SECOND_PRECISION.  Defaults to DAY_PRECISION (YYYY-MM-DD).
	// +kubebuilder:validation:Optional
	Precision *string `json:"precision,omitempty" tf:"precision,omitempty"`
}

type EnumValueInitParameters struct {

	// (String) List of valid query parameter values, newline delimited.
	EnumOptions *string `json:"enumOptions,omitempty" tf:"enum_options,omitempty"`

	// If specified, allows multiple values to be selected for this parameter. Consists of following attributes:
	MultiValuesOptions []MultiValuesOptionsInitParameters `json:"multiValuesOptions,omitempty" tf:"multi_values_options,omitempty"`

	// (Array of strings) List of selected query parameter values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type EnumValueObservation struct {

	// (String) List of valid query parameter values, newline delimited.
	EnumOptions *string `json:"enumOptions,omitempty" tf:"enum_options,omitempty"`

	// If specified, allows multiple values to be selected for this parameter. Consists of following attributes:
	MultiValuesOptions []MultiValuesOptionsObservation `json:"multiValuesOptions,omitempty" tf:"multi_values_options,omitempty"`

	// (Array of strings) List of selected query parameter values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type EnumValueParameters struct {

	// (String) List of valid query parameter values, newline delimited.
	// +kubebuilder:validation:Optional
	EnumOptions *string `json:"enumOptions,omitempty" tf:"enum_options,omitempty"`

	// If specified, allows multiple values to be selected for this parameter. Consists of following attributes:
	// +kubebuilder:validation:Optional
	MultiValuesOptions []MultiValuesOptionsParameters `json:"multiValuesOptions,omitempty" tf:"multi_values_options,omitempty"`

	// (Array of strings) List of selected query parameter values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MultiValuesOptionsInitParameters struct {

	// Character that prefixes each selected parameter value.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Character that separates each selected parameter value. Defaults to a comma.
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`

	// Character that suffixes each selected parameter value.
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type MultiValuesOptionsObservation struct {

	// Character that prefixes each selected parameter value.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Character that separates each selected parameter value. Defaults to a comma.
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`

	// Character that suffixes each selected parameter value.
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type MultiValuesOptionsParameters struct {

	// Character that prefixes each selected parameter value.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Character that separates each selected parameter value. Defaults to a comma.
	// +kubebuilder:validation:Optional
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`

	// Character that suffixes each selected parameter value.
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type NumericValueInitParameters struct {

	// - actual text value.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type NumericValueObservation struct {

	// - actual text value.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type NumericValueParameters struct {

	// - actual text value.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ParameterInitParameters struct {

	// (Block) Date-range query parameter value. Consists of following attributes (Can only specify one of dynamic_date_range_value or date_range_value):
	DateRangeValue []DateRangeValueInitParameters `json:"dateRangeValue,omitempty" tf:"date_range_value,omitempty"`

	// (Block) Date query parameter value. Consists of following attributes (Can only specify one of dynamic_date_value or date_value):
	DateValue []DateValueInitParameters `json:"dateValue,omitempty" tf:"date_value,omitempty"`

	// (Block) Dropdown parameter value. Consists of following attributes:
	EnumValue []EnumValueInitParameters `json:"enumValue,omitempty" tf:"enum_value,omitempty"`

	// Literal parameter marker that appears between double curly braces in the query text.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block) Numeric parameter value. Consists of following attributes:
	NumericValue []NumericValueInitParameters `json:"numericValue,omitempty" tf:"numeric_value,omitempty"`

	// (Block) Query-based dropdown parameter value. Consists of following attributes:
	QueryBackedValue []QueryBackedValueInitParameters `json:"queryBackedValue,omitempty" tf:"query_backed_value,omitempty"`

	// (Block) Text parameter value. Consists of following attributes:
	TextValue []TextValueInitParameters `json:"textValue,omitempty" tf:"text_value,omitempty"`

	// Text displayed in the user-facing parameter widget in the UI.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ParameterObservation struct {

	// (Block) Date-range query parameter value. Consists of following attributes (Can only specify one of dynamic_date_range_value or date_range_value):
	DateRangeValue []DateRangeValueObservation `json:"dateRangeValue,omitempty" tf:"date_range_value,omitempty"`

	// (Block) Date query parameter value. Consists of following attributes (Can only specify one of dynamic_date_value or date_value):
	DateValue []DateValueObservation `json:"dateValue,omitempty" tf:"date_value,omitempty"`

	// (Block) Dropdown parameter value. Consists of following attributes:
	EnumValue []EnumValueObservation `json:"enumValue,omitempty" tf:"enum_value,omitempty"`

	// Literal parameter marker that appears between double curly braces in the query text.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block) Numeric parameter value. Consists of following attributes:
	NumericValue []NumericValueObservation `json:"numericValue,omitempty" tf:"numeric_value,omitempty"`

	// (Block) Query-based dropdown parameter value. Consists of following attributes:
	QueryBackedValue []QueryBackedValueObservation `json:"queryBackedValue,omitempty" tf:"query_backed_value,omitempty"`

	// (Block) Text parameter value. Consists of following attributes:
	TextValue []TextValueObservation `json:"textValue,omitempty" tf:"text_value,omitempty"`

	// Text displayed in the user-facing parameter widget in the UI.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ParameterParameters struct {

	// (Block) Date-range query parameter value. Consists of following attributes (Can only specify one of dynamic_date_range_value or date_range_value):
	// +kubebuilder:validation:Optional
	DateRangeValue []DateRangeValueParameters `json:"dateRangeValue,omitempty" tf:"date_range_value,omitempty"`

	// (Block) Date query parameter value. Consists of following attributes (Can only specify one of dynamic_date_value or date_value):
	// +kubebuilder:validation:Optional
	DateValue []DateValueParameters `json:"dateValue,omitempty" tf:"date_value,omitempty"`

	// (Block) Dropdown parameter value. Consists of following attributes:
	// +kubebuilder:validation:Optional
	EnumValue []EnumValueParameters `json:"enumValue,omitempty" tf:"enum_value,omitempty"`

	// Literal parameter marker that appears between double curly braces in the query text.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block) Numeric parameter value. Consists of following attributes:
	// +kubebuilder:validation:Optional
	NumericValue []NumericValueParameters `json:"numericValue,omitempty" tf:"numeric_value,omitempty"`

	// (Block) Query-based dropdown parameter value. Consists of following attributes:
	// +kubebuilder:validation:Optional
	QueryBackedValue []QueryBackedValueParameters `json:"queryBackedValue,omitempty" tf:"query_backed_value,omitempty"`

	// (Block) Text parameter value. Consists of following attributes:
	// +kubebuilder:validation:Optional
	TextValue []TextValueParameters `json:"textValue,omitempty" tf:"text_value,omitempty"`

	// Text displayed in the user-facing parameter widget in the UI.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type QueryBackedValueInitParameters struct {

	// If specified, allows multiple values to be selected for this parameter. Consists of following attributes:
	MultiValuesOptions []QueryBackedValueMultiValuesOptionsInitParameters `json:"multiValuesOptions,omitempty" tf:"multi_values_options,omitempty"`

	// ID of the query that provides the parameter values.
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// (Array of strings) List of selected query parameter values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type QueryBackedValueMultiValuesOptionsInitParameters struct {

	// Character that prefixes each selected parameter value.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Character that separates each selected parameter value. Defaults to a comma.
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`

	// Character that suffixes each selected parameter value.
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type QueryBackedValueMultiValuesOptionsObservation struct {

	// Character that prefixes each selected parameter value.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Character that separates each selected parameter value. Defaults to a comma.
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`

	// Character that suffixes each selected parameter value.
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type QueryBackedValueMultiValuesOptionsParameters struct {

	// Character that prefixes each selected parameter value.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Character that separates each selected parameter value. Defaults to a comma.
	// +kubebuilder:validation:Optional
	Separator *string `json:"separator,omitempty" tf:"separator,omitempty"`

	// Character that suffixes each selected parameter value.
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`
}

type QueryBackedValueObservation struct {

	// If specified, allows multiple values to be selected for this parameter. Consists of following attributes:
	MultiValuesOptions []QueryBackedValueMultiValuesOptionsObservation `json:"multiValuesOptions,omitempty" tf:"multi_values_options,omitempty"`

	// ID of the query that provides the parameter values.
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// (Array of strings) List of selected query parameter values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type QueryBackedValueParameters struct {

	// If specified, allows multiple values to be selected for this parameter. Consists of following attributes:
	// +kubebuilder:validation:Optional
	MultiValuesOptions []QueryBackedValueMultiValuesOptionsParameters `json:"multiValuesOptions,omitempty" tf:"multi_values_options,omitempty"`

	// ID of the query that provides the parameter values.
	// +kubebuilder:validation:Optional
	QueryID *string `json:"queryId" tf:"query_id,omitempty"`

	// (Array of strings) List of selected query parameter values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type QueryInitParameters struct {

	// Whether to apply a 1000 row limit to the query result.
	ApplyAutoLimit *bool `json:"applyAutoLimit,omitempty" tf:"apply_auto_limit,omitempty"`

	// Name of the catalog where this query will be executed.
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// General description that conveys additional information about this query such as usage notes.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the query.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Query owner's username.
	OwnerUserName *string `json:"ownerUserName,omitempty" tf:"owner_user_name,omitempty"`

	// Query parameter definition.  Consists of following attributes (one of *_value is required):
	Parameter []ParameterInitParameters `json:"parameter,omitempty" tf:"parameter,omitempty"`

	// The path to a workspace folder containing the query. The default is the user's home folder.  If changed, the query will be recreated.
	ParentPath *string `json:"parentPath,omitempty" tf:"parent_path,omitempty"`

	// Text of SQL query.
	QueryText *string `json:"queryText,omitempty" tf:"query_text,omitempty"`

	// Sets the "Run as" role for the object.  Should be one of OWNER, VIEWER.
	RunAsMode *string `json:"runAsMode,omitempty" tf:"run_as_mode,omitempty"`

	// Name of the schema where this query will be executed.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tags that will be added to the query.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of a SQL warehouse which will be used to execute this query.
	WarehouseID *string `json:"warehouseId,omitempty" tf:"warehouse_id,omitempty"`
}

type QueryObservation struct {

	// Whether to apply a 1000 row limit to the query result.
	ApplyAutoLimit *bool `json:"applyAutoLimit,omitempty" tf:"apply_auto_limit,omitempty"`

	// Name of the catalog where this query will be executed.
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// The timestamp string indicating when the query was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// General description that conveys additional information about this query such as usage notes.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the query.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// unique ID of the created Query.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Username of the user who last saved changes to this query.
	LastModifierUserName *string `json:"lastModifierUserName,omitempty" tf:"last_modifier_user_name,omitempty"`

	// The workspace state of the query. Used for tracking trashed status. (Possible values are ACTIVE or TRASHED).
	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state,omitempty"`

	// Query owner's username.
	OwnerUserName *string `json:"ownerUserName,omitempty" tf:"owner_user_name,omitempty"`

	// Query parameter definition.  Consists of following attributes (one of *_value is required):
	Parameter []ParameterObservation `json:"parameter,omitempty" tf:"parameter,omitempty"`

	// The path to a workspace folder containing the query. The default is the user's home folder.  If changed, the query will be recreated.
	ParentPath *string `json:"parentPath,omitempty" tf:"parent_path,omitempty"`

	// Text of SQL query.
	QueryText *string `json:"queryText,omitempty" tf:"query_text,omitempty"`

	// Sets the "Run as" role for the object.  Should be one of OWNER, VIEWER.
	RunAsMode *string `json:"runAsMode,omitempty" tf:"run_as_mode,omitempty"`

	// Name of the schema where this query will be executed.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tags that will be added to the query.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The timestamp string indicating when the query was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// ID of a SQL warehouse which will be used to execute this query.
	WarehouseID *string `json:"warehouseId,omitempty" tf:"warehouse_id,omitempty"`
}

type QueryParameters struct {

	// Whether to apply a 1000 row limit to the query result.
	// +kubebuilder:validation:Optional
	ApplyAutoLimit *bool `json:"applyAutoLimit,omitempty" tf:"apply_auto_limit,omitempty"`

	// Name of the catalog where this query will be executed.
	// +kubebuilder:validation:Optional
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// General description that conveys additional information about this query such as usage notes.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the query.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Query owner's username.
	// +kubebuilder:validation:Optional
	OwnerUserName *string `json:"ownerUserName,omitempty" tf:"owner_user_name,omitempty"`

	// Query parameter definition.  Consists of following attributes (one of *_value is required):
	// +kubebuilder:validation:Optional
	Parameter []ParameterParameters `json:"parameter,omitempty" tf:"parameter,omitempty"`

	// The path to a workspace folder containing the query. The default is the user's home folder.  If changed, the query will be recreated.
	// +kubebuilder:validation:Optional
	ParentPath *string `json:"parentPath,omitempty" tf:"parent_path,omitempty"`

	// Text of SQL query.
	// +kubebuilder:validation:Optional
	QueryText *string `json:"queryText,omitempty" tf:"query_text,omitempty"`

	// Sets the "Run as" role for the object.  Should be one of OWNER, VIEWER.
	// +kubebuilder:validation:Optional
	RunAsMode *string `json:"runAsMode,omitempty" tf:"run_as_mode,omitempty"`

	// Name of the schema where this query will be executed.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Tags that will be added to the query.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of a SQL warehouse which will be used to execute this query.
	// +kubebuilder:validation:Optional
	WarehouseID *string `json:"warehouseId,omitempty" tf:"warehouse_id,omitempty"`
}

type TextValueInitParameters struct {

	// - actual text value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TextValueObservation struct {

	// - actual text value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TextValueParameters struct {

	// - actual text value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// QuerySpec defines the desired state of Query
type QuerySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueryInitParameters `json:"initProvider,omitempty"`
}

// QueryStatus defines the observed state of Query.
type QueryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Query is the Schema for the Querys API. ""subcategory: "Databricks SQL"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type Query struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queryText) || (has(self.initProvider) && has(self.initProvider.queryText))",message="spec.forProvider.queryText is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.warehouseId) || (has(self.initProvider) && has(self.initProvider.warehouseId))",message="spec.forProvider.warehouseId is a required parameter"
	Spec   QuerySpec   `json:"spec"`
	Status QueryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueryList contains a list of Querys
type QueryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Query `json:"items"`
}

// Repository type metadata.
var (
	Query_Kind             = "Query"
	Query_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Query_Kind}.String()
	Query_KindAPIVersion   = Query_Kind + "." + CRDGroupVersion.String()
	Query_GroupVersionKind = CRDGroupVersion.WithKind(Query_Kind)
)

func init() {
	SchemeBuilder.Register(&Query{}, &QueryList{})
}
