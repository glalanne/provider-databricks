// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SystemSchemaInitParameters struct {

	// name of the system schema.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The current state of enablement for the system schema.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type SystemSchemaObservation struct {

	// the full name of the system schema, in form of system.<schema>.
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// the ID of system schema in form of metastore_id|schema_name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the ID of system schema in form of metastore_id|schema_name.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// name of the system schema.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The current state of enablement for the system schema.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type SystemSchemaParameters struct {

	// name of the system schema.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The current state of enablement for the system schema.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// SystemSchemaSpec defines the desired state of SystemSchema
type SystemSchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SystemSchemaParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SystemSchemaInitParameters `json:"initProvider,omitempty"`
}

// SystemSchemaStatus defines the observed state of SystemSchema.
type SystemSchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SystemSchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SystemSchema is the Schema for the SystemSchemas API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type SystemSchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SystemSchemaSpec   `json:"spec"`
	Status            SystemSchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SystemSchemaList contains a list of SystemSchemas
type SystemSchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SystemSchema `json:"items"`
}

// Repository type metadata.
var (
	SystemSchema_Kind             = "SystemSchema"
	SystemSchema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SystemSchema_Kind}.String()
	SystemSchema_KindAPIVersion   = SystemSchema_Kind + "." + CRDGroupVersion.String()
	SystemSchema_GroupVersionKind = CRDGroupVersion.WithKind(SystemSchema_Kind)
)

func init() {
	SchemeBuilder.Register(&SystemSchema{}, &SystemSchemaList{})
}
