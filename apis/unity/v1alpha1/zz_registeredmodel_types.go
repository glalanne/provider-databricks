// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegisteredModelInitParameters struct {

	// The name of the catalog where the schema and the registered model reside. Change of this parameter forces recreation of the resource.
	CatalogName *string `json:"catalogName,omitempty" tf:"catalog_name,omitempty"`

	// The comment attached to the registered model.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The name of the registered model.  Change of this parameter forces recreation of the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the registered model owner.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The name of the schema where the registered model resides. Change of this parameter forces recreation of the resource.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// The storage location under which model version data files are stored. Change of this parameter forces recreation of the resource.
	StorageLocation *string `json:"storageLocation,omitempty" tf:"storage_location,omitempty"`
}

type RegisteredModelObservation struct {

	// The name of the catalog where the schema and the registered model reside. Change of this parameter forces recreation of the resource.
	CatalogName *string `json:"catalogName,omitempty" tf:"catalog_name,omitempty"`

	// The comment attached to the registered model.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Equal to the full name of the model (catalog_name.schema_name.name) and used to identify the model uniquely across the metastore.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the registered model.  Change of this parameter forces recreation of the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the registered model owner.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The name of the schema where the registered model resides. Change of this parameter forces recreation of the resource.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// The storage location under which model version data files are stored. Change of this parameter forces recreation of the resource.
	StorageLocation *string `json:"storageLocation,omitempty" tf:"storage_location,omitempty"`
}

type RegisteredModelParameters struct {

	// The name of the catalog where the schema and the registered model reside. Change of this parameter forces recreation of the resource.
	// +kubebuilder:validation:Optional
	CatalogName *string `json:"catalogName,omitempty" tf:"catalog_name,omitempty"`

	// The comment attached to the registered model.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The name of the registered model.  Change of this parameter forces recreation of the resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the registered model owner.
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// The name of the schema where the registered model resides. Change of this parameter forces recreation of the resource.
	// +kubebuilder:validation:Optional
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// The storage location under which model version data files are stored. Change of this parameter forces recreation of the resource.
	// +kubebuilder:validation:Optional
	StorageLocation *string `json:"storageLocation,omitempty" tf:"storage_location,omitempty"`
}

// RegisteredModelSpec defines the desired state of RegisteredModel
type RegisteredModelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegisteredModelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegisteredModelInitParameters `json:"initProvider,omitempty"`
}

// RegisteredModelStatus defines the observed state of RegisteredModel.
type RegisteredModelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegisteredModelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RegisteredModel is the Schema for the RegisteredModels API. ""subcategory: "Unity Catalog"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type RegisteredModel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.catalogName) || (has(self.initProvider) && has(self.initProvider.catalogName))",message="spec.forProvider.catalogName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schemaName) || (has(self.initProvider) && has(self.initProvider.schemaName))",message="spec.forProvider.schemaName is a required parameter"
	Spec   RegisteredModelSpec   `json:"spec"`
	Status RegisteredModelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegisteredModelList contains a list of RegisteredModels
type RegisteredModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegisteredModel `json:"items"`
}

// Repository type metadata.
var (
	RegisteredModel_Kind             = "RegisteredModel"
	RegisteredModel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegisteredModel_Kind}.String()
	RegisteredModel_KindAPIVersion   = RegisteredModel_Kind + "." + CRDGroupVersion.String()
	RegisteredModel_GroupVersionKind = CRDGroupVersion.WithKind(RegisteredModel_Kind)
)

func init() {
	SchemeBuilder.Register(&RegisteredModel{}, &RegisteredModelList{})
}
