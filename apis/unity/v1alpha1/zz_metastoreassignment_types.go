// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetastoreAssignmentInitParameters struct {

	// (Deprecated) Default catalog used for this assignment. Please use databricks_default_namespace_setting instead.
	DefaultCatalogName *string `json:"defaultCatalogName,omitempty" tf:"default_catalog_name,omitempty"`

	// Unique identifier of the parent Metastore
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// id of the workspace for the assignment
	WorkspaceID *float64 `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type MetastoreAssignmentObservation struct {

	// (Deprecated) Default catalog used for this assignment. Please use databricks_default_namespace_setting instead.
	DefaultCatalogName *string `json:"defaultCatalogName,omitempty" tf:"default_catalog_name,omitempty"`

	// ID of this metastore assignment in form of <workspace_id>|<metastore_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique identifier of the parent Metastore
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// id of the workspace for the assignment
	WorkspaceID *float64 `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type MetastoreAssignmentParameters struct {

	// (Deprecated) Default catalog used for this assignment. Please use databricks_default_namespace_setting instead.
	// +kubebuilder:validation:Optional
	DefaultCatalogName *string `json:"defaultCatalogName,omitempty" tf:"default_catalog_name,omitempty"`

	// Unique identifier of the parent Metastore
	// +kubebuilder:validation:Optional
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// id of the workspace for the assignment
	// +kubebuilder:validation:Optional
	WorkspaceID *float64 `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

// MetastoreAssignmentSpec defines the desired state of MetastoreAssignment
type MetastoreAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MetastoreAssignmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MetastoreAssignmentInitParameters `json:"initProvider,omitempty"`
}

// MetastoreAssignmentStatus defines the observed state of MetastoreAssignment.
type MetastoreAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetastoreAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MetastoreAssignment is the Schema for the MetastoreAssignments API. ""subcategory: "Unity Catalog"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,}
type MetastoreAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metastoreId) || (has(self.initProvider) && has(self.initProvider.metastoreId))",message="spec.forProvider.metastoreId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.workspaceId) || (has(self.initProvider) && has(self.initProvider.workspaceId))",message="spec.forProvider.workspaceId is a required parameter"
	Spec   MetastoreAssignmentSpec   `json:"spec"`
	Status MetastoreAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetastoreAssignmentList contains a list of MetastoreAssignments
type MetastoreAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetastoreAssignment `json:"items"`
}

// Repository type metadata.
var (
	MetastoreAssignment_Kind             = "MetastoreAssignment"
	MetastoreAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MetastoreAssignment_Kind}.String()
	MetastoreAssignment_KindAPIVersion   = MetastoreAssignment_Kind + "." + CRDGroupVersion.String()
	MetastoreAssignment_GroupVersionKind = CRDGroupVersion.WithKind(MetastoreAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&MetastoreAssignment{}, &MetastoreAssignmentList{})
}
