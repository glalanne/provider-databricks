// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageCredentialAwsIAMRoleInitParameters struct {

	// ID of this storage credential - same as the name.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	UnityCatalogIAMArn *string `json:"unityCatalogIamArn,omitempty" tf:"unity_catalog_iam_arn,omitempty"`
}

type StorageCredentialAwsIAMRoleObservation struct {

	// ID of this storage credential - same as the name.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	UnityCatalogIAMArn *string `json:"unityCatalogIamArn,omitempty" tf:"unity_catalog_iam_arn,omitempty"`
}

type StorageCredentialAwsIAMRoleParameters struct {

	// ID of this storage credential - same as the name.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// The Amazon Resource Name (ARN) of the AWS IAM role for S3 data access, of the form arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	UnityCatalogIAMArn *string `json:"unityCatalogIamArn,omitempty" tf:"unity_catalog_iam_arn,omitempty"`
}

type StorageCredentialAzureManagedIdentityInitParameters struct {

	// The Resource ID of the Azure Databricks Access Connector resource, of the form /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name.
	AccessConnectorID *string `json:"accessConnectorId,omitempty" tf:"access_connector_id,omitempty"`

	// ID of this storage credential - same as the name.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name.
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`
}

type StorageCredentialAzureManagedIdentityObservation struct {

	// The Resource ID of the Azure Databricks Access Connector resource, of the form /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name.
	AccessConnectorID *string `json:"accessConnectorId,omitempty" tf:"access_connector_id,omitempty"`

	// ID of this storage credential - same as the name.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name.
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`
}

type StorageCredentialAzureManagedIdentityParameters struct {

	// The Resource ID of the Azure Databricks Access Connector resource, of the form /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.Databricks/accessConnectors/connector-name.
	// +kubebuilder:validation:Optional
	AccessConnectorID *string `json:"accessConnectorId" tf:"access_connector_id,omitempty"`

	// ID of this storage credential - same as the name.
	// +kubebuilder:validation:Optional
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// The Resource ID of the Azure User Assigned Managed Identity associated with Azure Databricks Access Connector, of the form /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/user-managed-identity-name.
	// +kubebuilder:validation:Optional
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`
}

type StorageCredentialAzureServicePrincipalInitParameters struct {

	// The application ID of the application registration within the referenced AAD tenant
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// The client secret generated for the above app ID in AAD. This field is redacted on output
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`
}

type StorageCredentialAzureServicePrincipalObservation struct {

	// The application ID of the application registration within the referenced AAD tenant
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`
}

type StorageCredentialAzureServicePrincipalParameters struct {

	// The application ID of the application registration within the referenced AAD tenant
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// The client secret generated for the above app ID in AAD. This field is redacted on output
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// The directory ID corresponding to the Azure Active Directory (AAD) tenant of the application
	// +kubebuilder:validation:Optional
	DirectoryID *string `json:"directoryId" tf:"directory_id,omitempty"`
}

type StorageCredentialCloudflareAPITokenInitParameters struct {

	// R2 API token access key ID
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// R2 account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// R2 API token secret access key
	SecretAccessKeySecretRef v1.SecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`
}

type StorageCredentialCloudflareAPITokenObservation struct {

	// R2 API token access key ID
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// R2 account ID
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`
}

type StorageCredentialCloudflareAPITokenParameters struct {

	// R2 API token access key ID
	// +kubebuilder:validation:Optional
	AccessKeyID *string `json:"accessKeyId" tf:"access_key_id,omitempty"`

	// R2 account ID
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// R2 API token secret access key
	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef v1.SecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`
}

type StorageCredentialDatabricksGCPServiceAccountInitParameters struct {

	// ID of this storage credential - same as the name.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// The email of the GCP service account created, to be granted access to relevant buckets.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type StorageCredentialDatabricksGCPServiceAccountObservation struct {

	// ID of this storage credential - same as the name.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// The email of the GCP service account created, to be granted access to relevant buckets.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type StorageCredentialDatabricksGCPServiceAccountParameters struct {

	// ID of this storage credential - same as the name.
	// +kubebuilder:validation:Optional
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// The email of the GCP service account created, to be granted access to relevant buckets.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type StorageCredentialGCPServiceAccountKeyInitParameters struct {

	// The email of the GCP service account created, to be granted access to relevant buckets.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// ID of this storage credential - same as the name.
	PrivateKeyID *string `json:"privateKeyId,omitempty" tf:"private_key_id,omitempty"`

	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`
}

type StorageCredentialGCPServiceAccountKeyObservation struct {

	// The email of the GCP service account created, to be granted access to relevant buckets.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// ID of this storage credential - same as the name.
	PrivateKeyID *string `json:"privateKeyId,omitempty" tf:"private_key_id,omitempty"`
}

type StorageCredentialGCPServiceAccountKeyParameters struct {

	// The email of the GCP service account created, to be granted access to relevant buckets.
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// ID of this storage credential - same as the name.
	// +kubebuilder:validation:Optional
	PrivateKeyID *string `json:"privateKeyId" tf:"private_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`
}

type StorageCredentialInitParameters struct {
	AwsIAMRole []StorageCredentialAwsIAMRoleInitParameters `json:"awsIamRole,omitempty" tf:"aws_iam_role,omitempty"`

	AzureManagedIdentity []StorageCredentialAzureManagedIdentityInitParameters `json:"azureManagedIdentity,omitempty" tf:"azure_managed_identity,omitempty"`

	AzureServicePrincipal []StorageCredentialAzureServicePrincipalInitParameters `json:"azureServicePrincipal,omitempty" tf:"azure_service_principal,omitempty"`

	CloudflareAPIToken []StorageCredentialCloudflareAPITokenInitParameters `json:"cloudflareApiToken,omitempty" tf:"cloudflare_api_token,omitempty"`

	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	DatabricksGCPServiceAccount []StorageCredentialDatabricksGCPServiceAccountInitParameters `json:"databricksGcpServiceAccount,omitempty" tf:"databricks_gcp_service_account,omitempty"`

	// Delete storage credential regardless of its dependencies.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Update storage credential regardless of its dependents.
	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	GCPServiceAccountKey []StorageCredentialGCPServiceAccountKeyInitParameters `json:"gcpServiceAccountKey,omitempty" tf:"gcp_service_account_key,omitempty"`

	// Whether the storage credential is accessible from all workspaces or a specific set of workspaces. Can be ISOLATION_MODE_ISOLATED or ISOLATION_MODE_OPEN. Setting the credential to ISOLATION_MODE_ISOLATED will automatically allow access from the current workspace.
	IsolationMode *string `json:"isolationMode,omitempty" tf:"isolation_mode,omitempty"`

	// Unique identifier of the parent Metastore. If set for workspace-level, it must match the ID of the metastore assigned to the worspace. When changing the metastore assigned to a workspace, this field becomes required.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// Name of Storage Credentials, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Username/groupname/sp application_id of the storage credential owner.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Indicates whether the storage credential is only usable for read operations.
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Suppress validation errors if any & force save the storage credential.
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`
}

type StorageCredentialObservation struct {
	AwsIAMRole []StorageCredentialAwsIAMRoleObservation `json:"awsIamRole,omitempty" tf:"aws_iam_role,omitempty"`

	AzureManagedIdentity []StorageCredentialAzureManagedIdentityObservation `json:"azureManagedIdentity,omitempty" tf:"azure_managed_identity,omitempty"`

	AzureServicePrincipal []StorageCredentialAzureServicePrincipalObservation `json:"azureServicePrincipal,omitempty" tf:"azure_service_principal,omitempty"`

	CloudflareAPIToken []StorageCredentialCloudflareAPITokenObservation `json:"cloudflareApiToken,omitempty" tf:"cloudflare_api_token,omitempty"`

	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	DatabricksGCPServiceAccount []StorageCredentialDatabricksGCPServiceAccountObservation `json:"databricksGcpServiceAccount,omitempty" tf:"databricks_gcp_service_account,omitempty"`

	// Delete storage credential regardless of its dependencies.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Update storage credential regardless of its dependents.
	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	GCPServiceAccountKey []StorageCredentialGCPServiceAccountKeyObservation `json:"gcpServiceAccountKey,omitempty" tf:"gcp_service_account_key,omitempty"`

	// ID of this storage credential - same as the name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether the storage credential is accessible from all workspaces or a specific set of workspaces. Can be ISOLATION_MODE_ISOLATED or ISOLATION_MODE_OPEN. Setting the credential to ISOLATION_MODE_ISOLATED will automatically allow access from the current workspace.
	IsolationMode *string `json:"isolationMode,omitempty" tf:"isolation_mode,omitempty"`

	// Unique identifier of the parent Metastore. If set for workspace-level, it must match the ID of the metastore assigned to the worspace. When changing the metastore assigned to a workspace, this field becomes required.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// Name of Storage Credentials, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Username/groupname/sp application_id of the storage credential owner.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Indicates whether the storage credential is only usable for read operations.
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Suppress validation errors if any & force save the storage credential.
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`

	// Unique ID of storage credential.
	StorageCredentialID *string `json:"storageCredentialId,omitempty" tf:"storage_credential_id,omitempty"`
}

type StorageCredentialParameters struct {

	// +kubebuilder:validation:Optional
	AwsIAMRole []StorageCredentialAwsIAMRoleParameters `json:"awsIamRole,omitempty" tf:"aws_iam_role,omitempty"`

	// +kubebuilder:validation:Optional
	AzureManagedIdentity []StorageCredentialAzureManagedIdentityParameters `json:"azureManagedIdentity,omitempty" tf:"azure_managed_identity,omitempty"`

	// +kubebuilder:validation:Optional
	AzureServicePrincipal []StorageCredentialAzureServicePrincipalParameters `json:"azureServicePrincipal,omitempty" tf:"azure_service_principal,omitempty"`

	// +kubebuilder:validation:Optional
	CloudflareAPIToken []StorageCredentialCloudflareAPITokenParameters `json:"cloudflareApiToken,omitempty" tf:"cloudflare_api_token,omitempty"`

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	DatabricksGCPServiceAccount []StorageCredentialDatabricksGCPServiceAccountParameters `json:"databricksGcpServiceAccount,omitempty" tf:"databricks_gcp_service_account,omitempty"`

	// Delete storage credential regardless of its dependencies.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Update storage credential regardless of its dependents.
	// +kubebuilder:validation:Optional
	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	// +kubebuilder:validation:Optional
	GCPServiceAccountKey []StorageCredentialGCPServiceAccountKeyParameters `json:"gcpServiceAccountKey,omitempty" tf:"gcp_service_account_key,omitempty"`

	// Whether the storage credential is accessible from all workspaces or a specific set of workspaces. Can be ISOLATION_MODE_ISOLATED or ISOLATION_MODE_OPEN. Setting the credential to ISOLATION_MODE_ISOLATED will automatically allow access from the current workspace.
	// +kubebuilder:validation:Optional
	IsolationMode *string `json:"isolationMode,omitempty" tf:"isolation_mode,omitempty"`

	// Unique identifier of the parent Metastore. If set for workspace-level, it must match the ID of the metastore assigned to the worspace. When changing the metastore assigned to a workspace, this field becomes required.
	// +kubebuilder:validation:Optional
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// Name of Storage Credentials, which must be unique within the databricks_metastore. Change forces creation of a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Username/groupname/sp application_id of the storage credential owner.
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// Indicates whether the storage credential is only usable for read operations.
	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Suppress validation errors if any & force save the storage credential.
	// +kubebuilder:validation:Optional
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`
}

// StorageCredentialSpec defines the desired state of StorageCredential
type StorageCredentialSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageCredentialParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageCredentialInitParameters `json:"initProvider,omitempty"`
}

// StorageCredentialStatus defines the observed state of StorageCredential.
type StorageCredentialStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageCredentialObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StorageCredential is the Schema for the StorageCredentials API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type StorageCredential struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   StorageCredentialSpec   `json:"spec"`
	Status StorageCredentialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageCredentialList contains a list of StorageCredentials
type StorageCredentialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageCredential `json:"items"`
}

// Repository type metadata.
var (
	StorageCredential_Kind             = "StorageCredential"
	StorageCredential_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageCredential_Kind}.String()
	StorageCredential_KindAPIVersion   = StorageCredential_Kind + "." + CRDGroupVersion.String()
	StorageCredential_GroupVersionKind = CRDGroupVersion.WithKind(StorageCredential_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageCredential{}, &StorageCredentialList{})
}
