// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WorkspaceFileInitParameters struct {

	// The base64-encoded file content. Conflicts with source.
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// Unique identifier for a workspace file
	ObjectID *float64 `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The absolute path of the workspace file, beginning with "/", e.g. "/Demo".
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Path to file on local filesystem. Conflicts with content_base64.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type WorkspaceFileObservation struct {

	// The base64-encoded file content. Conflicts with source.
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// Path of workspace file
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// Unique identifier for a workspace file
	ObjectID *float64 `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The absolute path of the workspace file, beginning with "/", e.g. "/Demo".
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Path to file on local filesystem. Conflicts with content_base64.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Routable URL of the workspace file
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// path on Workspace File System (WSFS) in form of /Workspace + path
	WorkspacePath *string `json:"workspacePath,omitempty" tf:"workspace_path,omitempty"`
}

type WorkspaceFileParameters struct {

	// The base64-encoded file content. Conflicts with source.
	// +kubebuilder:validation:Optional
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// +kubebuilder:validation:Optional
	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// Unique identifier for a workspace file
	// +kubebuilder:validation:Optional
	ObjectID *float64 `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The absolute path of the workspace file, beginning with "/", e.g. "/Demo".
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Path to file on local filesystem. Conflicts with content_base64.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

// WorkspaceFileSpec defines the desired state of WorkspaceFile
type WorkspaceFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkspaceFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkspaceFileInitParameters `json:"initProvider,omitempty"`
}

// WorkspaceFileStatus defines the observed state of WorkspaceFile.
type WorkspaceFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkspaceFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WorkspaceFile is the Schema for the WorkspaceFiles API. ""subcategory: "Workspace"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type WorkspaceFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	Spec   WorkspaceFileSpec   `json:"spec"`
	Status WorkspaceFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceFileList contains a list of WorkspaceFiles
type WorkspaceFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkspaceFile `json:"items"`
}

// Repository type metadata.
var (
	WorkspaceFile_Kind             = "WorkspaceFile"
	WorkspaceFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkspaceFile_Kind}.String()
	WorkspaceFile_KindAPIVersion   = WorkspaceFile_Kind + "." + CRDGroupVersion.String()
	WorkspaceFile_GroupVersionKind = CRDGroupVersion.WithKind(WorkspaceFile_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkspaceFile{}, &WorkspaceFileList{})
}
