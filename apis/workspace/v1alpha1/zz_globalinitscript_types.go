// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GlobalInitScriptInitParameters struct {

	// The base64-encoded source code global init script. Conflicts with source
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// (bool, optional default: false) specifies if the script is enabled for execution, or not
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// the name of the script.  It should be unique
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// the position of a global init script, where 0 represents the first global init script to run, 1 is the second global init script to run, and so on. When omitted, the script gets the last position.
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// Path to script's source code on local filesystem. Conflicts with content_base64
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type GlobalInitScriptObservation struct {

	// The base64-encoded source code global init script. Conflicts with source
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// (bool, optional default: false) specifies if the script is enabled for execution, or not
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// ID assigned to a global init script by API
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// the name of the script.  It should be unique
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// the position of a global init script, where 0 represents the first global init script to run, 1 is the second global init script to run, and so on. When omitted, the script gets the last position.
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// Path to script's source code on local filesystem. Conflicts with content_base64
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type GlobalInitScriptParameters struct {

	// The base64-encoded source code global init script. Conflicts with source
	// +kubebuilder:validation:Optional
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// (bool, optional default: false) specifies if the script is enabled for execution, or not
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// the name of the script.  It should be unique
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// the position of a global init script, where 0 represents the first global init script to run, 1 is the second global init script to run, and so on. When omitted, the script gets the last position.
	// +kubebuilder:validation:Optional
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// Path to script's source code on local filesystem. Conflicts with content_base64
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

// GlobalInitScriptSpec defines the desired state of GlobalInitScript
type GlobalInitScriptSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalInitScriptParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GlobalInitScriptInitParameters `json:"initProvider,omitempty"`
}

// GlobalInitScriptStatus defines the observed state of GlobalInitScript.
type GlobalInitScriptStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalInitScriptObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GlobalInitScript is the Schema for the GlobalInitScripts API. ""subcategory: "Workspace"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type GlobalInitScript struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   GlobalInitScriptSpec   `json:"spec"`
	Status GlobalInitScriptStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalInitScriptList contains a list of GlobalInitScripts
type GlobalInitScriptList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalInitScript `json:"items"`
}

// Repository type metadata.
var (
	GlobalInitScript_Kind             = "GlobalInitScript"
	GlobalInitScript_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalInitScript_Kind}.String()
	GlobalInitScript_KindAPIVersion   = GlobalInitScript_Kind + "." + CRDGroupVersion.String()
	GlobalInitScript_GroupVersionKind = CRDGroupVersion.WithKind(GlobalInitScript_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalInitScript{}, &GlobalInitScriptList{})
}
