// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ConfigInitParameters struct {

	// The email configuration of the Notification Destination. It must contain the following:
	Email []EmailInitParameters `json:"email,omitempty" tf:"email,omitempty"`

	// The Generic Webhook configuration of the Notification Destination. It must contain the following:
	GenericWebhook []GenericWebhookInitParameters `json:"genericWebhook,omitempty" tf:"generic_webhook,omitempty"`

	// The Microsoft Teams configuration of the Notification Destination. It must contain the following:
	MicrosoftTeams []MicrosoftTeamsInitParameters `json:"microsoftTeams,omitempty" tf:"microsoft_teams,omitempty"`

	// The PagerDuty configuration of the Notification Destination. It must contain the following:
	Pagerduty []PagerdutyInitParameters `json:"pagerduty,omitempty" tf:"pagerduty,omitempty"`

	// The Slack configuration of the Notification Destination. It must contain the following:
	Slack []SlackInitParameters `json:"slack,omitempty" tf:"slack,omitempty"`
}

type ConfigObservation struct {

	// The email configuration of the Notification Destination. It must contain the following:
	Email []EmailObservation `json:"email,omitempty" tf:"email,omitempty"`

	// The Generic Webhook configuration of the Notification Destination. It must contain the following:
	GenericWebhook []GenericWebhookObservation `json:"genericWebhook,omitempty" tf:"generic_webhook,omitempty"`

	// The Microsoft Teams configuration of the Notification Destination. It must contain the following:
	MicrosoftTeams []MicrosoftTeamsObservation `json:"microsoftTeams,omitempty" tf:"microsoft_teams,omitempty"`

	// The PagerDuty configuration of the Notification Destination. It must contain the following:
	Pagerduty []PagerdutyObservation `json:"pagerduty,omitempty" tf:"pagerduty,omitempty"`

	// The Slack configuration of the Notification Destination. It must contain the following:
	Slack []SlackObservation `json:"slack,omitempty" tf:"slack,omitempty"`
}

type ConfigParameters struct {

	// The email configuration of the Notification Destination. It must contain the following:
	// +kubebuilder:validation:Optional
	Email []EmailParameters `json:"email,omitempty" tf:"email,omitempty"`

	// The Generic Webhook configuration of the Notification Destination. It must contain the following:
	// +kubebuilder:validation:Optional
	GenericWebhook []GenericWebhookParameters `json:"genericWebhook,omitempty" tf:"generic_webhook,omitempty"`

	// The Microsoft Teams configuration of the Notification Destination. It must contain the following:
	// +kubebuilder:validation:Optional
	MicrosoftTeams []MicrosoftTeamsParameters `json:"microsoftTeams,omitempty" tf:"microsoft_teams,omitempty"`

	// The PagerDuty configuration of the Notification Destination. It must contain the following:
	// +kubebuilder:validation:Optional
	Pagerduty []PagerdutyParameters `json:"pagerduty,omitempty" tf:"pagerduty,omitempty"`

	// The Slack configuration of the Notification Destination. It must contain the following:
	// +kubebuilder:validation:Optional
	Slack []SlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`
}

type EmailInitParameters struct {

	// The list of email addresses to send notifications to.
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`
}

type EmailObservation struct {

	// The list of email addresses to send notifications to.
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`
}

type EmailParameters struct {

	// The list of email addresses to send notifications to.
	// +kubebuilder:validation:Optional
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`
}

type GenericWebhookInitParameters struct {

	// The password for basic authentication.
	PasswordSecretRef *v1.LocalSecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	PasswordSet *bool `json:"passwordSet,omitempty" tf:"password_set,omitempty"`

	// The Slack webhook URL.
	URLSecretRef *v1.LocalSecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`

	// The username for basic authentication.
	UsernameSecretRef *v1.LocalSecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`

	UsernameSet *bool `json:"usernameSet,omitempty" tf:"username_set,omitempty"`
}

type GenericWebhookObservation struct {
	PasswordSet *bool `json:"passwordSet,omitempty" tf:"password_set,omitempty"`

	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`

	UsernameSet *bool `json:"usernameSet,omitempty" tf:"username_set,omitempty"`
}

type GenericWebhookParameters struct {

	// The password for basic authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.LocalSecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PasswordSet *bool `json:"passwordSet,omitempty" tf:"password_set,omitempty"`

	// The Slack webhook URL.
	// +kubebuilder:validation:Optional
	URLSecretRef *v1.LocalSecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`

	// The username for basic authentication.
	// +kubebuilder:validation:Optional
	UsernameSecretRef *v1.LocalSecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UsernameSet *bool `json:"usernameSet,omitempty" tf:"username_set,omitempty"`
}

type MicrosoftTeamsInitParameters struct {

	// The Slack webhook URL.
	URLSecretRef *v1.LocalSecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`
}

type MicrosoftTeamsObservation struct {
	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`
}

type MicrosoftTeamsParameters struct {

	// The Slack webhook URL.
	// +kubebuilder:validation:Optional
	URLSecretRef *v1.LocalSecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`
}

type NotificationDestinationInitParameters struct {

	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// the type of Notification Destination.
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// The display name of the Notification Destination.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`
}

type NotificationDestinationObservation struct {

	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// the type of Notification Destination.
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// The display name of the Notification Destination.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The unique ID of the Notification Destination.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NotificationDestinationParameters struct {

	// The configuration of the Notification Destination. It must contain exactly one of the following blocks:
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// the type of Notification Destination.
	// +kubebuilder:validation:Optional
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// The display name of the Notification Destination.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`
}

type PagerdutyInitParameters struct {

	// The PagerDuty integration key.
	IntegrationKeySecretRef *v1.LocalSecretKeySelector `json:"integrationKeySecretRef,omitempty" tf:"-"`

	IntegrationKeySet *bool `json:"integrationKeySet,omitempty" tf:"integration_key_set,omitempty"`
}

type PagerdutyObservation struct {
	IntegrationKeySet *bool `json:"integrationKeySet,omitempty" tf:"integration_key_set,omitempty"`
}

type PagerdutyParameters struct {

	// The PagerDuty integration key.
	// +kubebuilder:validation:Optional
	IntegrationKeySecretRef *v1.LocalSecretKeySelector `json:"integrationKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IntegrationKeySet *bool `json:"integrationKeySet,omitempty" tf:"integration_key_set,omitempty"`
}

type SlackInitParameters struct {

	// The unique ID of the Notification Destination.
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	ChannelIDSet *bool `json:"channelIdSet,omitempty" tf:"channel_id_set,omitempty"`

	OauthToken *string `json:"oauthToken,omitempty" tf:"oauth_token,omitempty"`

	OauthTokenSet *bool `json:"oauthTokenSet,omitempty" tf:"oauth_token_set,omitempty"`

	// The Slack webhook URL.
	URLSecretRef *v1.LocalSecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`
}

type SlackObservation struct {

	// The unique ID of the Notification Destination.
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	ChannelIDSet *bool `json:"channelIdSet,omitempty" tf:"channel_id_set,omitempty"`

	OauthToken *string `json:"oauthToken,omitempty" tf:"oauth_token,omitempty"`

	OauthTokenSet *bool `json:"oauthTokenSet,omitempty" tf:"oauth_token_set,omitempty"`

	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`
}

type SlackParameters struct {

	// The unique ID of the Notification Destination.
	// +kubebuilder:validation:Optional
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// +kubebuilder:validation:Optional
	ChannelIDSet *bool `json:"channelIdSet,omitempty" tf:"channel_id_set,omitempty"`

	// +kubebuilder:validation:Optional
	OauthToken *string `json:"oauthToken,omitempty" tf:"oauth_token,omitempty"`

	// +kubebuilder:validation:Optional
	OauthTokenSet *bool `json:"oauthTokenSet,omitempty" tf:"oauth_token_set,omitempty"`

	// The Slack webhook URL.
	// +kubebuilder:validation:Optional
	URLSecretRef *v1.LocalSecretKeySelector `json:"urlSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	URLSet *bool `json:"urlSet,omitempty" tf:"url_set,omitempty"`
}

// NotificationDestinationSpec defines the desired state of NotificationDestination
type NotificationDestinationSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            NotificationDestinationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NotificationDestinationInitParameters `json:"initProvider,omitempty"`
}

// NotificationDestinationStatus defines the observed state of NotificationDestination.
type NotificationDestinationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationDestinationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NotificationDestination is the Schema for the NotificationDestinations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type NotificationDestination struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	Spec   NotificationDestinationSpec   `json:"spec"`
	Status NotificationDestinationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationDestinationList contains a list of NotificationDestinations
type NotificationDestinationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationDestination `json:"items"`
}

// Repository type metadata.
var (
	NotificationDestination_Kind             = "NotificationDestination"
	NotificationDestination_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NotificationDestination_Kind}.String()
	NotificationDestination_KindAPIVersion   = NotificationDestination_Kind + "." + CRDGroupVersion.String()
	NotificationDestination_GroupVersionKind = CRDGroupVersion.WithKind(NotificationDestination_Kind)
)

func init() {
	SchemeBuilder.Register(&NotificationDestination{}, &NotificationDestinationList{})
}
