// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Mount) ResolveReferences( // ResolveReferences of this Mount.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.Abfs != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Abfs.ClientSecretKey),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Abfs.ClientSecretKeyRef,
				Selector:     mg.Spec.ForProvider.Abfs.ClientSecretKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Abfs.ClientSecretKey")
		}
		mg.Spec.ForProvider.Abfs.ClientSecretKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Abfs.ClientSecretKeyRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Abfs != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "SecretScope", "SecretScopeList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Abfs.ClientSecretScope),
				Extract:      resource.ExtractParamPath("name", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Abfs.ClientSecretScopeRef,
				Selector:     mg.Spec.ForProvider.Abfs.ClientSecretScopeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Abfs.ClientSecretScope")
		}
		mg.Spec.ForProvider.Abfs.ClientSecretScope = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Abfs.ClientSecretScopeRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Adl != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Adl.ClientSecretKey),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Adl.ClientSecretKeyRef,
				Selector:     mg.Spec.ForProvider.Adl.ClientSecretKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Adl.ClientSecretKey")
		}
		mg.Spec.ForProvider.Adl.ClientSecretKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Adl.ClientSecretKeyRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Adl != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "SecretScope", "SecretScopeList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Adl.ClientSecretScope),
				Extract:      resource.ExtractParamPath("name", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Adl.ClientSecretScopeRef,
				Selector:     mg.Spec.ForProvider.Adl.ClientSecretScopeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Adl.ClientSecretScope")
		}
		mg.Spec.ForProvider.Adl.ClientSecretScope = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Adl.ClientSecretScopeRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ClusterIDRef,
			Selector:     mg.Spec.ForProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference

	if mg.Spec.ForProvider.S3 != nil {
		{
			m, l, err = apisresolver.GetManagedResource("deployment.databricks.m.crossplane.io", "v1alpha1", "InstanceProfile", "InstanceProfileList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.S3.InstanceProfile),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.S3.InstanceProfileRef,
				Selector:     mg.Spec.ForProvider.S3.InstanceProfileSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.S3.InstanceProfile")
		}
		mg.Spec.ForProvider.S3.InstanceProfile = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.S3.InstanceProfileRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Wasb != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Wasb.TokenSecretKey),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Wasb.TokenSecretKeyRef,
				Selector:     mg.Spec.ForProvider.Wasb.TokenSecretKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Wasb.TokenSecretKey")
		}
		mg.Spec.ForProvider.Wasb.TokenSecretKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Wasb.TokenSecretKeyRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.Wasb != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "SecretScope", "SecretScopeList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Wasb.TokenSecretScope),
				Extract:      resource.ExtractParamPath("name", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Wasb.TokenSecretScopeRef,
				Selector:     mg.Spec.ForProvider.Wasb.TokenSecretScopeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Wasb.TokenSecretScope")
		}
		mg.Spec.ForProvider.Wasb.TokenSecretScope = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Wasb.TokenSecretScopeRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Abfs != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Abfs.ClientSecretKey),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Abfs.ClientSecretKeyRef,
				Selector:     mg.Spec.InitProvider.Abfs.ClientSecretKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Abfs.ClientSecretKey")
		}
		mg.Spec.InitProvider.Abfs.ClientSecretKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Abfs.ClientSecretKeyRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Abfs != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "SecretScope", "SecretScopeList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Abfs.ClientSecretScope),
				Extract:      resource.ExtractParamPath("name", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Abfs.ClientSecretScopeRef,
				Selector:     mg.Spec.InitProvider.Abfs.ClientSecretScopeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Abfs.ClientSecretScope")
		}
		mg.Spec.InitProvider.Abfs.ClientSecretScope = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Abfs.ClientSecretScopeRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Adl != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Adl.ClientSecretKey),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Adl.ClientSecretKeyRef,
				Selector:     mg.Spec.InitProvider.Adl.ClientSecretKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Adl.ClientSecretKey")
		}
		mg.Spec.InitProvider.Adl.ClientSecretKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Adl.ClientSecretKeyRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Adl != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "SecretScope", "SecretScopeList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Adl.ClientSecretScope),
				Extract:      resource.ExtractParamPath("name", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Adl.ClientSecretScopeRef,
				Selector:     mg.Spec.InitProvider.Adl.ClientSecretScopeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Adl.ClientSecretScope")
		}
		mg.Spec.InitProvider.Adl.ClientSecretScope = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Adl.ClientSecretScopeRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ClusterIDRef,
			Selector:     mg.Spec.InitProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference

	if mg.Spec.InitProvider.S3 != nil {
		{
			m, l, err = apisresolver.GetManagedResource("deployment.databricks.m.crossplane.io", "v1alpha1", "InstanceProfile", "InstanceProfileList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.S3.InstanceProfile),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.S3.InstanceProfileRef,
				Selector:     mg.Spec.InitProvider.S3.InstanceProfileSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.S3.InstanceProfile")
		}
		mg.Spec.InitProvider.S3.InstanceProfile = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.S3.InstanceProfileRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Wasb != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Secret", "SecretList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Wasb.TokenSecretKey),
				Extract:      resource.ExtractParamPath("key", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Wasb.TokenSecretKeyRef,
				Selector:     mg.Spec.InitProvider.Wasb.TokenSecretKeySelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Wasb.TokenSecretKey")
		}
		mg.Spec.InitProvider.Wasb.TokenSecretKey = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Wasb.TokenSecretKeyRef = rsp.ResolvedReference

	}
	if mg.Spec.InitProvider.Wasb != nil {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "SecretScope", "SecretScopeList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Wasb.TokenSecretScope),
				Extract:      resource.ExtractParamPath("name", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Wasb.TokenSecretScopeRef,
				Selector:     mg.Spec.InitProvider.Wasb.TokenSecretScopeSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Wasb.TokenSecretScope")
		}
		mg.Spec.InitProvider.Wasb.TokenSecretScope = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Wasb.TokenSecretScopeRef = rsp.ResolvedReference

	}

	return nil
}
