// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Job) ResolveReferences( // ResolveReferences of this Job.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.NotebookTask); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NotebookTask[i3].NotebookPath),
				Extract:      resource.ExtractParamPath("path", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.NotebookTask[i3].NotebookPathRef,
				Selector:     mg.Spec.ForProvider.NotebookTask[i3].NotebookPathSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NotebookTask[i3].NotebookPath")
		}
		mg.Spec.ForProvider.NotebookTask[i3].NotebookPath = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NotebookTask[i3].NotebookPathRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].ExistingClusterID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Task[i3].ExistingClusterIDRef,
				Selector:     mg.Spec.ForProvider.Task[i3].ExistingClusterIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].ExistingClusterID")
		}
		mg.Spec.ForProvider.Task[i3].ExistingClusterID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Task[i3].ExistingClusterIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Task[i3].NotebookTask); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].NotebookTask[i4].NotebookPath),
					Extract:      resource.ExtractParamPath("path", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Task[i3].NotebookTask[i4].NotebookPathRef,
					Selector:     mg.Spec.ForProvider.Task[i3].NotebookTask[i4].NotebookPathSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].NotebookTask[i4].NotebookPath")
			}
			mg.Spec.ForProvider.Task[i3].NotebookTask[i4].NotebookPath = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Task[i3].NotebookTask[i4].NotebookPathRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Task[i3].PipelineTask); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Pipeline", "PipelineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].PipelineTask[i4].PipelineID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Task[i3].PipelineTask[i4].PipelineIDRef,
					Selector:     mg.Spec.ForProvider.Task[i3].PipelineTask[i4].PipelineIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].PipelineTask[i4].PipelineID")
			}
			mg.Spec.ForProvider.Task[i3].PipelineTask[i4].PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Task[i3].PipelineTask[i4].PipelineIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Task[i3].SQLTask); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLAlert", "SQLAlertList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert[i5].AlertID),
						Extract:      resource.ExtractResourceID(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert[i5].AlertIDRef,
						Selector:     mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert[i5].AlertIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert[i5].AlertID")
				}
				mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert[i5].AlertID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Task[i3].SQLTask[i4].Alert[i5].AlertIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Task[i3].SQLTask); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLDashboard", "SQLDashboardList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardID),
						Extract:      resource.ExtractResourceID(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardIDRef,
						Selector:     mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardID")
				}
				mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Task[i3].SQLTask); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query[i5].QueryID),
						Extract:      resource.ExtractResourceID(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query[i5].QueryIDRef,
						Selector:     mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query[i5].QueryIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query[i5].QueryID")
				}
				mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query[i5].QueryID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.Task[i3].SQLTask[i4].Query[i5].QueryIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Task[i3].SQLTask); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Task[i3].SQLTask[i4].WarehouseID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Task[i3].SQLTask[i4].WarehouseIDRef,
					Selector:     mg.Spec.ForProvider.Task[i3].SQLTask[i4].WarehouseIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Task[i3].SQLTask[i4].WarehouseID")
			}
			mg.Spec.ForProvider.Task[i3].SQLTask[i4].WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Task[i3].SQLTask[i4].WarehouseIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NotebookTask); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NotebookTask[i3].NotebookPath),
				Extract:      resource.ExtractParamPath("path", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.NotebookTask[i3].NotebookPathRef,
				Selector:     mg.Spec.InitProvider.NotebookTask[i3].NotebookPathSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NotebookTask[i3].NotebookPath")
		}
		mg.Spec.InitProvider.NotebookTask[i3].NotebookPath = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NotebookTask[i3].NotebookPathRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].ExistingClusterID),
				Extract:      resource.ExtractResourceID(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Task[i3].ExistingClusterIDRef,
				Selector:     mg.Spec.InitProvider.Task[i3].ExistingClusterIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].ExistingClusterID")
		}
		mg.Spec.InitProvider.Task[i3].ExistingClusterID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Task[i3].ExistingClusterIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Task[i3].NotebookTask); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].NotebookTask[i4].NotebookPath),
					Extract:      resource.ExtractParamPath("path", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Task[i3].NotebookTask[i4].NotebookPathRef,
					Selector:     mg.Spec.InitProvider.Task[i3].NotebookTask[i4].NotebookPathSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].NotebookTask[i4].NotebookPath")
			}
			mg.Spec.InitProvider.Task[i3].NotebookTask[i4].NotebookPath = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Task[i3].NotebookTask[i4].NotebookPathRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Task[i3].PipelineTask); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Pipeline", "PipelineList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].PipelineTask[i4].PipelineID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Task[i3].PipelineTask[i4].PipelineIDRef,
					Selector:     mg.Spec.InitProvider.Task[i3].PipelineTask[i4].PipelineIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].PipelineTask[i4].PipelineID")
			}
			mg.Spec.InitProvider.Task[i3].PipelineTask[i4].PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Task[i3].PipelineTask[i4].PipelineIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Task[i3].SQLTask); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLAlert", "SQLAlertList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert[i5].AlertID),
						Extract:      resource.ExtractResourceID(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert[i5].AlertIDRef,
						Selector:     mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert[i5].AlertIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert[i5].AlertID")
				}
				mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert[i5].AlertID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Task[i3].SQLTask[i4].Alert[i5].AlertIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Task[i3].SQLTask); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLDashboard", "SQLDashboardList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardID),
						Extract:      resource.ExtractResourceID(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardIDRef,
						Selector:     mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardID")
				}
				mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Task[i3].SQLTask[i4].Dashboard[i5].DashboardIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Task[i3].SQLTask); i4++ {
			for i5 := 0; i5 < len(mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query); i5++ {
				{
					m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
					if err != nil {
						return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
					}
					rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query[i5].QueryID),
						Extract:      resource.ExtractResourceID(),
						Namespace:    mg.GetNamespace(),
						Reference:    mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query[i5].QueryIDRef,
						Selector:     mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query[i5].QueryIDSelector,
						To:           reference.To{List: l, Managed: m},
					})
				}
				if err != nil {
					return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query[i5].QueryID")
				}
				mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query[i5].QueryID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.InitProvider.Task[i3].SQLTask[i4].Query[i5].QueryIDRef = rsp.ResolvedReference

			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Task); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Task[i3].SQLTask); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Task[i3].SQLTask[i4].WarehouseID),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Task[i3].SQLTask[i4].WarehouseIDRef,
					Selector:     mg.Spec.InitProvider.Task[i3].SQLTask[i4].WarehouseIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Task[i3].SQLTask[i4].WarehouseID")
			}
			mg.Spec.InitProvider.Task[i3].SQLTask[i4].WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Task[i3].SQLTask[i4].WarehouseIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Library.
func (mg *Library) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ClusterIDRef,
			Selector:     mg.Spec.ForProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.databricks.m.crossplane.io", "v1alpha1", "DbfsFile", "DbfsFileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Egg),
			Extract:      resource.ExtractParamPath("dbfs_path", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.EggRef,
			Selector:     mg.Spec.ForProvider.EggSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Egg")
	}
	mg.Spec.ForProvider.Egg = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EggRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.databricks.m.crossplane.io", "v1alpha1", "File", "FileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Jar),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.JarRef,
			Selector:     mg.Spec.ForProvider.JarSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Jar")
	}
	mg.Spec.ForProvider.Jar = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.JarRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.databricks.m.crossplane.io", "v1alpha1", "File", "FileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Whl),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.WhlRef,
			Selector:     mg.Spec.ForProvider.WhlSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Whl")
	}
	mg.Spec.ForProvider.Whl = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WhlRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ClusterIDRef,
			Selector:     mg.Spec.InitProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.databricks.m.crossplane.io", "v1alpha1", "DbfsFile", "DbfsFileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Egg),
			Extract:      resource.ExtractParamPath("dbfs_path", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.EggRef,
			Selector:     mg.Spec.InitProvider.EggSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Egg")
	}
	mg.Spec.InitProvider.Egg = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EggRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.databricks.m.crossplane.io", "v1alpha1", "File", "FileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Jar),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.JarRef,
			Selector:     mg.Spec.InitProvider.JarSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Jar")
	}
	mg.Spec.InitProvider.Jar = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.JarRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("storage.databricks.m.crossplane.io", "v1alpha1", "File", "FileList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Whl),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.WhlRef,
			Selector:     mg.Spec.InitProvider.WhlSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Whl")
	}
	mg.Spec.InitProvider.Whl = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WhlRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Pipeline.
func (mg *Pipeline) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Library); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Library[i3].Notebook); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Library[i3].Notebook[i4].Path),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.Library[i3].Notebook[i4].PathRef,
					Selector:     mg.Spec.ForProvider.Library[i3].Notebook[i4].PathSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Library[i3].Notebook[i4].Path")
			}
			mg.Spec.ForProvider.Library[i3].Notebook[i4].Path = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Library[i3].Notebook[i4].PathRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Library); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Library[i3].Notebook); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Library[i3].Notebook[i4].Path),
					Extract:      resource.ExtractResourceID(),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.Library[i3].Notebook[i4].PathRef,
					Selector:     mg.Spec.InitProvider.Library[i3].Notebook[i4].PathSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Library[i3].Notebook[i4].Path")
			}
			mg.Spec.InitProvider.Library[i3].Notebook[i4].Path = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Library[i3].Notebook[i4].PathRef = rsp.ResolvedReference

		}
	}

	return nil
}
