// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type CloudflareAPITokenInitParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	SecretAccessKeySecretRef v1.LocalSecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`
}

type CloudflareAPITokenObservation struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	AccessKeyID *string `json:"accessKeyId,omitempty" tf:"access_key_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`
}

type CloudflareAPITokenParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	AccessKeyID *string `json:"accessKeyId" tf:"access_key_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef v1.LocalSecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`
}

type GCPServiceAccountKeyInitParameters struct {
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	PrivateKeyID *string `json:"privateKeyId,omitempty" tf:"private_key_id,omitempty"`

	PrivateKeySecretRef v1.LocalSecretKeySelector `json:"privateKeySecretRef" tf:"-"`
}

type GCPServiceAccountKeyObservation struct {
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	PrivateKeyID *string `json:"privateKeyId,omitempty" tf:"private_key_id,omitempty"`
}

type GCPServiceAccountKeyParameters struct {

	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	PrivateKeyID *string `json:"privateKeyId" tf:"private_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateKeySecretRef v1.LocalSecretKeySelector `json:"privateKeySecretRef" tf:"-"`
}

type MetastoreDataAccessAwsIAMRoleInitParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	UnityCatalogIAMArn *string `json:"unityCatalogIamArn,omitempty" tf:"unity_catalog_iam_arn,omitempty"`
}

type MetastoreDataAccessAwsIAMRoleObservation struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	UnityCatalogIAMArn *string `json:"unityCatalogIamArn,omitempty" tf:"unity_catalog_iam_arn,omitempty"`
}

type MetastoreDataAccessAwsIAMRoleParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	UnityCatalogIAMArn *string `json:"unityCatalogIamArn,omitempty" tf:"unity_catalog_iam_arn,omitempty"`
}

type MetastoreDataAccessAzureManagedIdentityInitParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	AccessConnectorID *string `json:"accessConnectorId,omitempty" tf:"access_connector_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`
}

type MetastoreDataAccessAzureManagedIdentityObservation struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	AccessConnectorID *string `json:"accessConnectorId,omitempty" tf:"access_connector_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`
}

type MetastoreDataAccessAzureManagedIdentityParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	AccessConnectorID *string `json:"accessConnectorId" tf:"access_connector_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	ManagedIdentityID *string `json:"managedIdentityId,omitempty" tf:"managed_identity_id,omitempty"`
}

type MetastoreDataAccessAzureServicePrincipalInitParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`
}

type MetastoreDataAccessAzureServicePrincipalObservation struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`
}

type MetastoreDataAccessAzureServicePrincipalParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	DirectoryID *string `json:"directoryId" tf:"directory_id,omitempty"`
}

type MetastoreDataAccessDatabricksGCPServiceAccountInitParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type MetastoreDataAccessDatabricksGCPServiceAccountObservation struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type MetastoreDataAccessDatabricksGCPServiceAccountParameters struct {

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	CredentialID *string `json:"credentialId,omitempty" tf:"credential_id,omitempty"`

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`
}

type MetastoreDataAccessInitParameters struct {
	AwsIAMRole []MetastoreDataAccessAwsIAMRoleInitParameters `json:"awsIamRole,omitempty" tf:"aws_iam_role,omitempty"`

	AzureManagedIdentity []MetastoreDataAccessAzureManagedIdentityInitParameters `json:"azureManagedIdentity,omitempty" tf:"azure_managed_identity,omitempty"`

	AzureServicePrincipal []MetastoreDataAccessAzureServicePrincipalInitParameters `json:"azureServicePrincipal,omitempty" tf:"azure_service_principal,omitempty"`

	CloudflareAPIToken []CloudflareAPITokenInitParameters `json:"cloudflareApiToken,omitempty" tf:"cloudflare_api_token,omitempty"`

	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	DatabricksGCPServiceAccount []MetastoreDataAccessDatabricksGCPServiceAccountInitParameters `json:"databricksGcpServiceAccount,omitempty" tf:"databricks_gcp_service_account,omitempty"`

	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	GCPServiceAccountKey []GCPServiceAccountKeyInitParameters `json:"gcpServiceAccountKey,omitempty" tf:"gcp_service_account_key,omitempty"`

	// whether to set this credential as the default for the metastore. In practice, this should always be true.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	IsolationMode *string `json:"isolationMode,omitempty" tf:"isolation_mode,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`
}

type MetastoreDataAccessObservation struct {
	AwsIAMRole []MetastoreDataAccessAwsIAMRoleObservation `json:"awsIamRole,omitempty" tf:"aws_iam_role,omitempty"`

	AzureManagedIdentity []MetastoreDataAccessAzureManagedIdentityObservation `json:"azureManagedIdentity,omitempty" tf:"azure_managed_identity,omitempty"`

	AzureServicePrincipal []MetastoreDataAccessAzureServicePrincipalObservation `json:"azureServicePrincipal,omitempty" tf:"azure_service_principal,omitempty"`

	CloudflareAPIToken []CloudflareAPITokenObservation `json:"cloudflareApiToken,omitempty" tf:"cloudflare_api_token,omitempty"`

	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	DatabricksGCPServiceAccount []MetastoreDataAccessDatabricksGCPServiceAccountObservation `json:"databricksGcpServiceAccount,omitempty" tf:"databricks_gcp_service_account,omitempty"`

	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	GCPServiceAccountKey []GCPServiceAccountKeyObservation `json:"gcpServiceAccountKey,omitempty" tf:"gcp_service_account_key,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// whether to set this credential as the default for the metastore. In practice, this should always be true.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	IsolationMode *string `json:"isolationMode,omitempty" tf:"isolation_mode,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`
}

type MetastoreDataAccessParameters struct {

	// +kubebuilder:validation:Optional
	AwsIAMRole []MetastoreDataAccessAwsIAMRoleParameters `json:"awsIamRole,omitempty" tf:"aws_iam_role,omitempty"`

	// +kubebuilder:validation:Optional
	AzureManagedIdentity []MetastoreDataAccessAzureManagedIdentityParameters `json:"azureManagedIdentity,omitempty" tf:"azure_managed_identity,omitempty"`

	// +kubebuilder:validation:Optional
	AzureServicePrincipal []MetastoreDataAccessAzureServicePrincipalParameters `json:"azureServicePrincipal,omitempty" tf:"azure_service_principal,omitempty"`

	// +kubebuilder:validation:Optional
	CloudflareAPIToken []CloudflareAPITokenParameters `json:"cloudflareApiToken,omitempty" tf:"cloudflare_api_token,omitempty"`

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Optional
	DatabricksGCPServiceAccount []MetastoreDataAccessDatabricksGCPServiceAccountParameters `json:"databricksGcpServiceAccount,omitempty" tf:"databricks_gcp_service_account,omitempty"`

	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// +kubebuilder:validation:Optional
	ForceUpdate *bool `json:"forceUpdate,omitempty" tf:"force_update,omitempty"`

	// +kubebuilder:validation:Optional
	GCPServiceAccountKey []GCPServiceAccountKeyParameters `json:"gcpServiceAccountKey,omitempty" tf:"gcp_service_account_key,omitempty"`

	// whether to set this credential as the default for the metastore. In practice, this should always be true.
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// +kubebuilder:validation:Optional
	IsolationMode *string `json:"isolationMode,omitempty" tf:"isolation_mode,omitempty"`

	// ID of this data access configuration in form of <metastore_id>|<name>.
	// +kubebuilder:validation:Optional
	MetastoreID *string `json:"metastoreId,omitempty" tf:"metastore_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// +kubebuilder:validation:Optional
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`
}

// MetastoreDataAccessSpec defines the desired state of MetastoreDataAccess
type MetastoreDataAccessSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            MetastoreDataAccessParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MetastoreDataAccessInitParameters `json:"initProvider,omitempty"`
}

// MetastoreDataAccessStatus defines the observed state of MetastoreDataAccess.
type MetastoreDataAccessStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MetastoreDataAccessObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MetastoreDataAccess is the Schema for the MetastoreDataAccesss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type MetastoreDataAccess struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MetastoreDataAccessSpec   `json:"spec"`
	Status MetastoreDataAccessStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MetastoreDataAccessList contains a list of MetastoreDataAccesss
type MetastoreDataAccessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MetastoreDataAccess `json:"items"`
}

// Repository type metadata.
var (
	MetastoreDataAccess_Kind             = "MetastoreDataAccess"
	MetastoreDataAccess_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MetastoreDataAccess_Kind}.String()
	MetastoreDataAccess_KindAPIVersion   = MetastoreDataAccess_Kind + "." + CRDGroupVersion.String()
	MetastoreDataAccess_GroupVersionKind = CRDGroupVersion.WithKind(MetastoreDataAccess_Kind)
)

func init() {
	SchemeBuilder.Register(&MetastoreDataAccess{}, &MetastoreDataAccessList{})
}
