// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *CatalogWorkspaceBinding) ResolveReferences( // ResolveReferences of this CatalogWorkspaceBinding.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurableName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SecurableNameRef,
			Selector:     mg.Spec.ForProvider.SecurableNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurableName")
	}
	mg.Spec.ForProvider.SecurableName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurableNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.m.crossplane.io", "v1alpha1", "MwsWorkspaces", "MwsWorkspacesList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.WorkspaceID),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.WorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceID")
	}
	mg.Spec.ForProvider.WorkspaceID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurableName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SecurableNameRef,
			Selector:     mg.Spec.InitProvider.SecurableNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurableName")
	}
	mg.Spec.InitProvider.SecurableName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurableNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.m.crossplane.io", "v1alpha1", "MwsWorkspaces", "MwsWorkspacesList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.WorkspaceID),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.WorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceID")
	}
	mg.Spec.InitProvider.WorkspaceID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkspaceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ExternalLocation.
func (mg *ExternalLocation) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "StorageCredential", "StorageCredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CredentialName),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CredentialNameRef,
			Selector:     mg.Spec.ForProvider.CredentialNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CredentialName")
	}
	mg.Spec.ForProvider.CredentialName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CredentialNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "StorageCredential", "StorageCredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CredentialName),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CredentialNameRef,
			Selector:     mg.Spec.InitProvider.CredentialNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CredentialName")
	}
	mg.Spec.InitProvider.CredentialName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CredentialNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Grant.
func (mg *Grant) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Catalog),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CatalogRef,
			Selector:     mg.Spec.ForProvider.CatalogSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Catalog")
	}
	mg.Spec.ForProvider.Catalog = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CatalogRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Credential", "CredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Credential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CredentialRef,
			Selector:     mg.Spec.ForProvider.CredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Credential")
	}
	mg.Spec.ForProvider.Credential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "ExternalLocation", "ExternalLocationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExternalLocation),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ExternalLocationRef,
			Selector:     mg.Spec.ForProvider.ExternalLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ExternalLocation")
	}
	mg.Spec.ForProvider.ExternalLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ExternalLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ForeignConnection),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ForeignConnectionRef,
			Selector:     mg.Spec.ForProvider.ForeignConnectionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ForeignConnection")
	}
	mg.Spec.ForProvider.ForeignConnection = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ForeignConnectionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "ServicePrincipal", "ServicePrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Principal),
			Extract:      resource.ExtractParamPath("application_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PrincipalRef,
			Selector:     mg.Spec.ForProvider.PrincipalSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Principal")
	}
	mg.Spec.ForProvider.Principal = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrincipalRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Schema),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SchemaRef,
			Selector:     mg.Spec.ForProvider.SchemaSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Schema")
	}
	mg.Spec.ForProvider.Schema = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SchemaRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sharing.databricks.m.crossplane.io", "v1alpha1", "Share", "ShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Share),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ShareRef,
			Selector:     mg.Spec.ForProvider.ShareSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Share")
	}
	mg.Spec.ForProvider.Share = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ShareRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "StorageCredential", "StorageCredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageCredential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.StorageCredentialRef,
			Selector:     mg.Spec.ForProvider.StorageCredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageCredential")
	}
	mg.Spec.ForProvider.StorageCredential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageCredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Volume),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VolumeRef,
			Selector:     mg.Spec.ForProvider.VolumeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Volume")
	}
	mg.Spec.ForProvider.Volume = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Catalog),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CatalogRef,
			Selector:     mg.Spec.InitProvider.CatalogSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Catalog")
	}
	mg.Spec.InitProvider.Catalog = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CatalogRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Credential", "CredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Credential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CredentialRef,
			Selector:     mg.Spec.InitProvider.CredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Credential")
	}
	mg.Spec.InitProvider.Credential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "ExternalLocation", "ExternalLocationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExternalLocation),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ExternalLocationRef,
			Selector:     mg.Spec.InitProvider.ExternalLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ExternalLocation")
	}
	mg.Spec.InitProvider.ExternalLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ExternalLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ForeignConnection),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ForeignConnectionRef,
			Selector:     mg.Spec.InitProvider.ForeignConnectionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ForeignConnection")
	}
	mg.Spec.InitProvider.ForeignConnection = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ForeignConnectionRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "ServicePrincipal", "ServicePrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Principal),
			Extract:      resource.ExtractParamPath("application_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.PrincipalRef,
			Selector:     mg.Spec.InitProvider.PrincipalSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Principal")
	}
	mg.Spec.InitProvider.Principal = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PrincipalRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Schema),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SchemaRef,
			Selector:     mg.Spec.InitProvider.SchemaSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Schema")
	}
	mg.Spec.InitProvider.Schema = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SchemaRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sharing.databricks.m.crossplane.io", "v1alpha1", "Share", "ShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Share),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ShareRef,
			Selector:     mg.Spec.InitProvider.ShareSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Share")
	}
	mg.Spec.InitProvider.Share = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ShareRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "StorageCredential", "StorageCredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageCredential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.StorageCredentialRef,
			Selector:     mg.Spec.InitProvider.StorageCredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageCredential")
	}
	mg.Spec.InitProvider.StorageCredential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageCredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Volume),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VolumeRef,
			Selector:     mg.Spec.InitProvider.VolumeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Volume")
	}
	mg.Spec.InitProvider.Volume = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VolumeRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GrantMap.
func (mg *GrantMap) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Catalog),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CatalogRef,
			Selector:     mg.Spec.ForProvider.CatalogSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Catalog")
	}
	mg.Spec.ForProvider.Catalog = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CatalogRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Credential", "CredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Credential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CredentialRef,
			Selector:     mg.Spec.ForProvider.CredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Credential")
	}
	mg.Spec.ForProvider.Credential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "ExternalLocation", "ExternalLocationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExternalLocation),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ExternalLocationRef,
			Selector:     mg.Spec.ForProvider.ExternalLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ExternalLocation")
	}
	mg.Spec.ForProvider.ExternalLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ExternalLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ForeignConnection),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ForeignConnectionRef,
			Selector:     mg.Spec.ForProvider.ForeignConnectionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ForeignConnection")
	}
	mg.Spec.ForProvider.ForeignConnection = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ForeignConnectionRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Grant); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Group", "GroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Grant[i3].Principal),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.Grant[i3].PrincipalRef,
				Selector:     mg.Spec.ForProvider.Grant[i3].PrincipalSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Grant[i3].Principal")
		}
		mg.Spec.ForProvider.Grant[i3].Principal = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Grant[i3].PrincipalRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Schema),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SchemaRef,
			Selector:     mg.Spec.ForProvider.SchemaSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Schema")
	}
	mg.Spec.ForProvider.Schema = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SchemaRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sharing.databricks.m.crossplane.io", "v1alpha1", "Share", "ShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Share),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ShareRef,
			Selector:     mg.Spec.ForProvider.ShareSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Share")
	}
	mg.Spec.ForProvider.Share = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ShareRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "StorageCredential", "StorageCredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageCredential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.StorageCredentialRef,
			Selector:     mg.Spec.ForProvider.StorageCredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageCredential")
	}
	mg.Spec.ForProvider.StorageCredential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageCredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Volume),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VolumeRef,
			Selector:     mg.Spec.ForProvider.VolumeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Volume")
	}
	mg.Spec.ForProvider.Volume = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Catalog),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CatalogRef,
			Selector:     mg.Spec.InitProvider.CatalogSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Catalog")
	}
	mg.Spec.InitProvider.Catalog = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CatalogRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Credential", "CredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Credential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CredentialRef,
			Selector:     mg.Spec.InitProvider.CredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Credential")
	}
	mg.Spec.InitProvider.Credential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "ExternalLocation", "ExternalLocationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ExternalLocation),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ExternalLocationRef,
			Selector:     mg.Spec.InitProvider.ExternalLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ExternalLocation")
	}
	mg.Spec.InitProvider.ExternalLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ExternalLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Connection", "ConnectionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ForeignConnection),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ForeignConnectionRef,
			Selector:     mg.Spec.InitProvider.ForeignConnectionSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ForeignConnection")
	}
	mg.Spec.InitProvider.ForeignConnection = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ForeignConnectionRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Grant); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.m.crossplane.io", "v1alpha1", "Group", "GroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Grant[i3].Principal),
				Extract:      reference.ExternalName(),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.Grant[i3].PrincipalRef,
				Selector:     mg.Spec.InitProvider.Grant[i3].PrincipalSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Grant[i3].Principal")
		}
		mg.Spec.InitProvider.Grant[i3].Principal = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Grant[i3].PrincipalRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Schema),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SchemaRef,
			Selector:     mg.Spec.InitProvider.SchemaSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Schema")
	}
	mg.Spec.InitProvider.Schema = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SchemaRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sharing.databricks.m.crossplane.io", "v1alpha1", "Share", "ShareList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Share),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ShareRef,
			Selector:     mg.Spec.InitProvider.ShareSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Share")
	}
	mg.Spec.InitProvider.Share = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ShareRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "StorageCredential", "StorageCredentialList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageCredential),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.StorageCredentialRef,
			Selector:     mg.Spec.InitProvider.StorageCredentialSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageCredential")
	}
	mg.Spec.InitProvider.StorageCredential = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageCredentialRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Volume", "VolumeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Volume),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VolumeRef,
			Selector:     mg.Spec.InitProvider.VolumeSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Volume")
	}
	mg.Spec.InitProvider.Volume = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VolumeRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MetastoreAssignment.
func (mg *MetastoreAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Metastore", "MetastoreList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MetastoreID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.MetastoreIDRef,
			Selector:     mg.Spec.ForProvider.MetastoreIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MetastoreID")
	}
	mg.Spec.ForProvider.MetastoreID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MetastoreIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Metastore", "MetastoreList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MetastoreID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.MetastoreIDRef,
			Selector:     mg.Spec.InitProvider.MetastoreIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MetastoreID")
	}
	mg.Spec.InitProvider.MetastoreID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MetastoreIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MetastoreDataAccess.
func (mg *MetastoreDataAccess) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Metastore", "MetastoreList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MetastoreID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.MetastoreIDRef,
			Selector:     mg.Spec.ForProvider.MetastoreIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MetastoreID")
	}
	mg.Spec.ForProvider.MetastoreID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MetastoreIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Metastore", "MetastoreList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MetastoreID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.MetastoreIDRef,
			Selector:     mg.Spec.InitProvider.MetastoreIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MetastoreID")
	}
	mg.Spec.InitProvider.MetastoreID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MetastoreIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLTable.
func (mg *SQLTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CatalogName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CatalogNameRef,
			Selector:     mg.Spec.ForProvider.CatalogNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CatalogName")
	}
	mg.Spec.ForProvider.CatalogName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CatalogNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ClusterIDRef,
			Selector:     mg.Spec.ForProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SchemaName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SchemaNameRef,
			Selector:     mg.Spec.ForProvider.SchemaNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SchemaName")
	}
	mg.Spec.ForProvider.SchemaName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SchemaNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WarehouseID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.WarehouseIDRef,
			Selector:     mg.Spec.ForProvider.WarehouseIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WarehouseID")
	}
	mg.Spec.ForProvider.WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WarehouseIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CatalogName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CatalogNameRef,
			Selector:     mg.Spec.InitProvider.CatalogNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CatalogName")
	}
	mg.Spec.InitProvider.CatalogName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CatalogNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.m.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ClusterIDRef,
			Selector:     mg.Spec.InitProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SchemaName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SchemaNameRef,
			Selector:     mg.Spec.InitProvider.SchemaNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SchemaName")
	}
	mg.Spec.InitProvider.SchemaName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SchemaNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WarehouseID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.WarehouseIDRef,
			Selector:     mg.Spec.InitProvider.WarehouseIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WarehouseID")
	}
	mg.Spec.InitProvider.WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WarehouseIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Schema.
func (mg *Schema) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CatalogName),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CatalogNameRef,
			Selector:     mg.Spec.ForProvider.CatalogNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CatalogName")
	}
	mg.Spec.ForProvider.CatalogName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CatalogNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CatalogName),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CatalogNameRef,
			Selector:     mg.Spec.InitProvider.CatalogNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CatalogName")
	}
	mg.Spec.InitProvider.CatalogName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CatalogNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Volume.
func (mg *Volume) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CatalogName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CatalogNameRef,
			Selector:     mg.Spec.ForProvider.CatalogNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CatalogName")
	}
	mg.Spec.ForProvider.CatalogName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CatalogNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SchemaName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SchemaNameRef,
			Selector:     mg.Spec.ForProvider.SchemaNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SchemaName")
	}
	mg.Spec.ForProvider.SchemaName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SchemaNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "ExternalLocation", "ExternalLocationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageLocation),
			Extract:      resource.ExtractParamPath("url", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.StorageLocationRef,
			Selector:     mg.Spec.ForProvider.StorageLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageLocation")
	}
	mg.Spec.ForProvider.StorageLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageLocationRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CatalogName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CatalogNameRef,
			Selector:     mg.Spec.InitProvider.CatalogNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CatalogName")
	}
	mg.Spec.InitProvider.CatalogName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CatalogNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Schema", "SchemaList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SchemaName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SchemaNameRef,
			Selector:     mg.Spec.InitProvider.SchemaNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SchemaName")
	}
	mg.Spec.InitProvider.SchemaName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SchemaNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "ExternalLocation", "ExternalLocationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageLocation),
			Extract:      resource.ExtractParamPath("url", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.StorageLocationRef,
			Selector:     mg.Spec.InitProvider.StorageLocationSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageLocation")
	}
	mg.Spec.InitProvider.StorageLocation = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageLocationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this WorkspaceBinding.
func (mg *WorkspaceBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurableName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SecurableNameRef,
			Selector:     mg.Spec.ForProvider.SecurableNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurableName")
	}
	mg.Spec.ForProvider.SecurableName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurableNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.m.crossplane.io", "v1alpha1", "MwsWorkspaces", "MwsWorkspacesList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.WorkspaceID),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.WorkspaceIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceID")
	}
	mg.Spec.ForProvider.WorkspaceID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WorkspaceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("unity.databricks.m.crossplane.io", "v1alpha1", "Catalog", "CatalogList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurableName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SecurableNameRef,
			Selector:     mg.Spec.InitProvider.SecurableNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurableName")
	}
	mg.Spec.InitProvider.SecurableName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurableNameRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.m.crossplane.io", "v1alpha1", "MwsWorkspaces", "MwsWorkspacesList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.WorkspaceID),
			Extract:      resource.ExtractParamPath("workspace_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.WorkspaceIDRef,
			Selector:     mg.Spec.InitProvider.WorkspaceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceID")
	}
	mg.Spec.InitProvider.WorkspaceID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WorkspaceIDRef = rsp.ResolvedReference

	return nil
}
