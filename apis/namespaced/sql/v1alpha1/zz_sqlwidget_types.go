// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type PositionInitParameters struct {
	AutoHeight *bool `json:"autoHeight,omitempty" tf:"auto_height,omitempty"`

	PosX *float64 `json:"posX,omitempty" tf:"pos_x,omitempty"`

	PosY *float64 `json:"posY,omitempty" tf:"pos_y,omitempty"`

	SizeX *float64 `json:"sizeX,omitempty" tf:"size_x,omitempty"`

	SizeY *float64 `json:"sizeY,omitempty" tf:"size_y,omitempty"`
}

type PositionObservation struct {
	AutoHeight *bool `json:"autoHeight,omitempty" tf:"auto_height,omitempty"`

	PosX *float64 `json:"posX,omitempty" tf:"pos_x,omitempty"`

	PosY *float64 `json:"posY,omitempty" tf:"pos_y,omitempty"`

	SizeX *float64 `json:"sizeX,omitempty" tf:"size_x,omitempty"`

	SizeY *float64 `json:"sizeY,omitempty" tf:"size_y,omitempty"`
}

type PositionParameters struct {

	// +kubebuilder:validation:Optional
	AutoHeight *bool `json:"autoHeight,omitempty" tf:"auto_height,omitempty"`

	// +kubebuilder:validation:Optional
	PosX *float64 `json:"posX,omitempty" tf:"pos_x,omitempty"`

	// +kubebuilder:validation:Optional
	PosY *float64 `json:"posY,omitempty" tf:"pos_y,omitempty"`

	// +kubebuilder:validation:Optional
	SizeX *float64 `json:"sizeX" tf:"size_x,omitempty"`

	// +kubebuilder:validation:Optional
	SizeY *float64 `json:"sizeY" tf:"size_y,omitempty"`
}

type SQLWidgetInitParameters struct {
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Parameter []SQLWidgetParameterInitParameters `json:"parameter,omitempty" tf:"parameter,omitempty"`

	Position *PositionInitParameters `json:"position,omitempty" tf:"position,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	VisualizationID *string `json:"visualizationId,omitempty" tf:"visualization_id,omitempty"`

	WidgetID *string `json:"widgetId,omitempty" tf:"widget_id,omitempty"`
}

type SQLWidgetObservation struct {
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Parameter []SQLWidgetParameterObservation `json:"parameter,omitempty" tf:"parameter,omitempty"`

	Position *PositionObservation `json:"position,omitempty" tf:"position,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	VisualizationID *string `json:"visualizationId,omitempty" tf:"visualization_id,omitempty"`

	WidgetID *string `json:"widgetId,omitempty" tf:"widget_id,omitempty"`
}

type SQLWidgetParameterInitParameters struct {
	MapTo *string `json:"mapTo,omitempty" tf:"map_to,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SQLWidgetParameterObservation struct {
	MapTo *string `json:"mapTo,omitempty" tf:"map_to,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SQLWidgetParameterParameters struct {

	// +kubebuilder:validation:Optional
	MapTo *string `json:"mapTo,omitempty" tf:"map_to,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SQLWidgetParameters struct {

	// +kubebuilder:validation:Optional
	DashboardID *string `json:"dashboardId,omitempty" tf:"dashboard_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Parameter []SQLWidgetParameterParameters `json:"parameter,omitempty" tf:"parameter,omitempty"`

	// +kubebuilder:validation:Optional
	Position *PositionParameters `json:"position,omitempty" tf:"position,omitempty"`

	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// +kubebuilder:validation:Optional
	VisualizationID *string `json:"visualizationId,omitempty" tf:"visualization_id,omitempty"`

	// +kubebuilder:validation:Optional
	WidgetID *string `json:"widgetId,omitempty" tf:"widget_id,omitempty"`
}

// SQLWidgetSpec defines the desired state of SQLWidget
type SQLWidgetSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SQLWidgetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQLWidgetInitParameters `json:"initProvider,omitempty"`
}

// SQLWidgetStatus defines the observed state of SQLWidget.
type SQLWidgetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLWidgetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SQLWidget is the Schema for the SQLWidgets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type SQLWidget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dashboardId) || (has(self.initProvider) && has(self.initProvider.dashboardId))",message="spec.forProvider.dashboardId is a required parameter"
	Spec   SQLWidgetSpec   `json:"spec"`
	Status SQLWidgetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLWidgetList contains a list of SQLWidgets
type SQLWidgetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLWidget `json:"items"`
}

// Repository type metadata.
var (
	SQLWidget_Kind             = "SQLWidget"
	SQLWidget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLWidget_Kind}.String()
	SQLWidget_KindAPIVersion   = SQLWidget_Kind + "." + CRDGroupVersion.String()
	SQLWidget_GroupVersionKind = CRDGroupVersion.WithKind(SQLWidget_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLWidget{}, &SQLWidgetList{})
}
