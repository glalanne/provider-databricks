// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type OptionsInitParameters struct {

	// Name of column in the query result to compare in alert evaluation.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// Custom body of alert notification, if it exists. See Alerts API reference for custom templating instructions.
	CustomBody *string `json:"customBody,omitempty" tf:"custom_body,omitempty"`

	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See Alerts API reference for custom templating instructions.
	CustomSubject *string `json:"customSubject,omitempty" tf:"custom_subject,omitempty"`

	// State that alert evaluates to when query result is empty.  Currently supported values are unknown, triggered, ok - check API documentation for full list of supported values.
	EmptyResultState *string `json:"emptyResultState,omitempty" tf:"empty_result_state,omitempty"`

	// Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
	Muted *bool `json:"muted,omitempty" tf:"muted,omitempty"`

	// Operator used to compare in alert evaluation. (Enum: >, >=, <, <=, ==, !=)
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// Value used to compare in alert evaluation.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OptionsObservation struct {

	// Name of column in the query result to compare in alert evaluation.
	Column *string `json:"column,omitempty" tf:"column,omitempty"`

	// Custom body of alert notification, if it exists. See Alerts API reference for custom templating instructions.
	CustomBody *string `json:"customBody,omitempty" tf:"custom_body,omitempty"`

	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See Alerts API reference for custom templating instructions.
	CustomSubject *string `json:"customSubject,omitempty" tf:"custom_subject,omitempty"`

	// State that alert evaluates to when query result is empty.  Currently supported values are unknown, triggered, ok - check API documentation for full list of supported values.
	EmptyResultState *string `json:"emptyResultState,omitempty" tf:"empty_result_state,omitempty"`

	// Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
	Muted *bool `json:"muted,omitempty" tf:"muted,omitempty"`

	// Operator used to compare in alert evaluation. (Enum: >, >=, <, <=, ==, !=)
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// Value used to compare in alert evaluation.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OptionsParameters struct {

	// Name of column in the query result to compare in alert evaluation.
	// +kubebuilder:validation:Optional
	Column *string `json:"column" tf:"column,omitempty"`

	// Custom body of alert notification, if it exists. See Alerts API reference for custom templating instructions.
	// +kubebuilder:validation:Optional
	CustomBody *string `json:"customBody,omitempty" tf:"custom_body,omitempty"`

	// Custom subject of alert notification, if it exists. This includes email subject, Slack notification header, etc. See Alerts API reference for custom templating instructions.
	// +kubebuilder:validation:Optional
	CustomSubject *string `json:"customSubject,omitempty" tf:"custom_subject,omitempty"`

	// State that alert evaluates to when query result is empty.  Currently supported values are unknown, triggered, ok - check API documentation for full list of supported values.
	// +kubebuilder:validation:Optional
	EmptyResultState *string `json:"emptyResultState,omitempty" tf:"empty_result_state,omitempty"`

	// Whether or not the alert is muted. If an alert is muted, it will not notify users and alert destinations when triggered.
	// +kubebuilder:validation:Optional
	Muted *bool `json:"muted,omitempty" tf:"muted,omitempty"`

	// Operator used to compare in alert evaluation. (Enum: >, >=, <, <=, ==, !=)
	// +kubebuilder:validation:Optional
	Op *string `json:"op" tf:"op,omitempty"`

	// Value used to compare in alert evaluation.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type SQLAlertInitParameters struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Name of the alert.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Alert configuration options.
	Options *OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as folder/<folder_id>.
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// ID of the query evaluated by the alert.
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm *float64 `json:"rearm,omitempty" tf:"rearm,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SQLAlertObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// unique ID of the SQL Alert.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the alert.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Alert configuration options.
	Options *OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as folder/<folder_id>.
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// ID of the query evaluated by the alert.
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	Rearm *float64 `json:"rearm,omitempty" tf:"rearm,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SQLAlertParameters struct {

	// +kubebuilder:validation:Optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Name of the alert.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Alert configuration options.
	// +kubebuilder:validation:Optional
	Options *OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// The identifier of the workspace folder containing the alert. The default is ther user's home folder. The folder identifier is formatted as folder/<folder_id>.
	// +kubebuilder:validation:Optional
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// ID of the query evaluated by the alert.
	// +kubebuilder:validation:Optional
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Number of seconds after being triggered before the alert rearms itself and can be triggered again. If not defined, alert will never be triggered again.
	// +kubebuilder:validation:Optional
	Rearm *float64 `json:"rearm,omitempty" tf:"rearm,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

// SQLAlertSpec defines the desired state of SQLAlert
type SQLAlertSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SQLAlertParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQLAlertInitParameters `json:"initProvider,omitempty"`
}

// SQLAlertStatus defines the observed state of SQLAlert.
type SQLAlertStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLAlertObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SQLAlert is the Schema for the SQLAlerts API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type SQLAlert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.options) || (has(self.initProvider) && has(self.initProvider.options))",message="spec.forProvider.options is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queryId) || (has(self.initProvider) && has(self.initProvider.queryId))",message="spec.forProvider.queryId is a required parameter"
	Spec   SQLAlertSpec   `json:"spec"`
	Status SQLAlertStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLAlertList contains a list of SQLAlerts
type SQLAlertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLAlert `json:"items"`
}

// Repository type metadata.
var (
	SQLAlert_Kind             = "SQLAlert"
	SQLAlert_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLAlert_Kind}.String()
	SQLAlert_KindAPIVersion   = SQLAlert_Kind + "." + CRDGroupVersion.String()
	SQLAlert_GroupVersionKind = CRDGroupVersion.WithKind(SQLAlert_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLAlert{}, &SQLAlertList{})
}
