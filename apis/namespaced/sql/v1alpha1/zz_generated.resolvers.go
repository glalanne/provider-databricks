// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Alert) ResolveReferences( // ResolveReferences of this Alert.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Directory", "DirectoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentPath),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ParentPathRef,
			Selector:     mg.Spec.ForProvider.ParentPathSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentPath")
	}
	mg.Spec.ForProvider.ParentPath = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentPathRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "Query", "QueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.QueryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.QueryIDRef,
			Selector:     mg.Spec.ForProvider.QueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.QueryID")
	}
	mg.Spec.ForProvider.QueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.QueryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Directory", "DirectoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ParentPath),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ParentPathRef,
			Selector:     mg.Spec.InitProvider.ParentPathSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ParentPath")
	}
	mg.Spec.InitProvider.ParentPath = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ParentPathRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "Query", "QueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.QueryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.QueryIDRef,
			Selector:     mg.Spec.InitProvider.QueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.QueryID")
	}
	mg.Spec.InitProvider.QueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.QueryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Query.
func (mg *Query) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Directory", "DirectoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentPath),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ParentPathRef,
			Selector:     mg.Spec.ForProvider.ParentPathSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentPath")
	}
	mg.Spec.ForProvider.ParentPath = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentPathRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WarehouseID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.WarehouseIDRef,
			Selector:     mg.Spec.ForProvider.WarehouseIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WarehouseID")
	}
	mg.Spec.ForProvider.WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WarehouseIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("workspace.databricks.m.crossplane.io", "v1alpha1", "Directory", "DirectoryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ParentPath),
			Extract:      resource.ExtractParamPath("path", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ParentPathRef,
			Selector:     mg.Spec.InitProvider.ParentPathSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ParentPath")
	}
	mg.Spec.InitProvider.ParentPath = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ParentPathRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WarehouseID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.WarehouseIDRef,
			Selector:     mg.Spec.InitProvider.WarehouseIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WarehouseID")
	}
	mg.Spec.InitProvider.WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WarehouseIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLAlert.
func (mg *SQLAlert) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.QueryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.QueryIDRef,
			Selector:     mg.Spec.ForProvider.QueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.QueryID")
	}
	mg.Spec.ForProvider.QueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.QueryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.QueryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.QueryIDRef,
			Selector:     mg.Spec.InitProvider.QueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.QueryID")
	}
	mg.Spec.InitProvider.QueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.QueryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLQuery.
func (mg *SQLQuery) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataSourceID),
			Extract:      resource.ExtractParamPath("data_source_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DataSourceIDRef,
			Selector:     mg.Spec.ForProvider.DataSourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataSourceID")
	}
	mg.Spec.ForProvider.DataSourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataSourceIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DataSourceID),
			Extract:      resource.ExtractParamPath("data_source_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DataSourceIDRef,
			Selector:     mg.Spec.InitProvider.DataSourceIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DataSourceID")
	}
	mg.Spec.InitProvider.DataSourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DataSourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLVisualization.
func (mg *SQLVisualization) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.QueryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.QueryIDRef,
			Selector:     mg.Spec.ForProvider.QueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.QueryID")
	}
	mg.Spec.ForProvider.QueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.QueryIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.QueryID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.QueryIDRef,
			Selector:     mg.Spec.InitProvider.QueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.QueryID")
	}
	mg.Spec.InitProvider.QueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.QueryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SQLWidget.
func (mg *SQLWidget) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLDashboard", "SQLDashboardList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DashboardID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.DashboardIDRef,
			Selector:     mg.Spec.ForProvider.DashboardIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DashboardID")
	}
	mg.Spec.ForProvider.DashboardID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DashboardIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLVisualization", "SQLVisualizationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VisualizationID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.VisualizationIDRef,
			Selector:     mg.Spec.ForProvider.VisualizationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VisualizationID")
	}
	mg.Spec.ForProvider.VisualizationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VisualizationIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLDashboard", "SQLDashboardList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DashboardID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.DashboardIDRef,
			Selector:     mg.Spec.InitProvider.DashboardIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DashboardID")
	}
	mg.Spec.InitProvider.DashboardID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DashboardIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.m.crossplane.io", "v1alpha1", "SQLVisualization", "SQLVisualizationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VisualizationID),
			Extract:      resource.ExtractResourceID(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.VisualizationIDRef,
			Selector:     mg.Spec.InitProvider.VisualizationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VisualizationID")
	}
	mg.Spec.InitProvider.VisualizationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VisualizationIDRef = rsp.ResolvedReference

	return nil
}
