// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type SQLDashboardInitParameters struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DashboardFiltersEnabled *bool `json:"dashboardFiltersEnabled,omitempty" tf:"dashboard_filters_enabled,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	RunAsRole *string `json:"runAsRole,omitempty" tf:"run_as_role,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SQLDashboardObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DashboardFiltersEnabled *bool `json:"dashboardFiltersEnabled,omitempty" tf:"dashboard_filters_enabled,omitempty"`

	// the unique ID of the SQL Dashboard.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	RunAsRole *string `json:"runAsRole,omitempty" tf:"run_as_role,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SQLDashboardParameters struct {

	// +kubebuilder:validation:Optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// +kubebuilder:validation:Optional
	DashboardFiltersEnabled *bool `json:"dashboardFiltersEnabled,omitempty" tf:"dashboard_filters_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// +kubebuilder:validation:Optional
	RunAsRole *string `json:"runAsRole,omitempty" tf:"run_as_role,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

// SQLDashboardSpec defines the desired state of SQLDashboard
type SQLDashboardSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SQLDashboardParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQLDashboardInitParameters `json:"initProvider,omitempty"`
}

// SQLDashboardStatus defines the observed state of SQLDashboard.
type SQLDashboardStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLDashboardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SQLDashboard is the Schema for the SQLDashboards API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type SQLDashboard struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SQLDashboardSpec   `json:"spec"`
	Status SQLDashboardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLDashboardList contains a list of SQLDashboards
type SQLDashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLDashboard `json:"items"`
}

// Repository type metadata.
var (
	SQLDashboard_Kind             = "SQLDashboard"
	SQLDashboard_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLDashboard_Kind}.String()
	SQLDashboard_KindAPIVersion   = SQLDashboard_Kind + "." + CRDGroupVersion.String()
	SQLDashboard_GroupVersionKind = CRDGroupVersion.WithKind(SQLDashboard_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLDashboard{}, &SQLDashboardList{})
}
