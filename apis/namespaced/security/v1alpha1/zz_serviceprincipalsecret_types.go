// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ServicePrincipalSecretInitParameters struct {

	// UTC time when the secret was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// UTC time when the secret will expire. If the field is not present, the secret does not expire.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// The lifetime of the secret in seconds formatted as NNNNs. If this parameter is not provided, the secret will have a default lifetime of 730 days (63072000s).  Expiration of secret will lead to generation of new secret.
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// Secret Hash.
	SecretHash *string `json:"secretHash,omitempty" tf:"secret_hash,omitempty"`

	// Sensitive Generated secret for the service principal.
	SecretSecretRef *v1.LocalSecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// SCIM ID of the databricks_service_principal (not application ID).
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// Status of the secret (i.e., ACTIVE - see REST API docs for full list).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// - Changing this argument forces recreation of the secret.
	TimeRotating *string `json:"timeRotating,omitempty" tf:"time_rotating,omitempty"`

	// UTC time when the secret was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ServicePrincipalSecretObservation struct {

	// UTC time when the secret was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// UTC time when the secret will expire. If the field is not present, the secret does not expire.
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// ID of the secret
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The lifetime of the secret in seconds formatted as NNNNs. If this parameter is not provided, the secret will have a default lifetime of 730 days (63072000s).  Expiration of secret will lead to generation of new secret.
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// Secret Hash.
	SecretHash *string `json:"secretHash,omitempty" tf:"secret_hash,omitempty"`

	// SCIM ID of the databricks_service_principal (not application ID).
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// Status of the secret (i.e., ACTIVE - see REST API docs for full list).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// - Changing this argument forces recreation of the secret.
	TimeRotating *string `json:"timeRotating,omitempty" tf:"time_rotating,omitempty"`

	// UTC time when the secret was updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ServicePrincipalSecretParameters struct {

	// UTC time when the secret was created.
	// +kubebuilder:validation:Optional
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// UTC time when the secret will expire. If the field is not present, the secret does not expire.
	// +kubebuilder:validation:Optional
	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// The lifetime of the secret in seconds formatted as NNNNs. If this parameter is not provided, the secret will have a default lifetime of 730 days (63072000s).  Expiration of secret will lead to generation of new secret.
	// +kubebuilder:validation:Optional
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// Secret Hash.
	// +kubebuilder:validation:Optional
	SecretHash *string `json:"secretHash,omitempty" tf:"secret_hash,omitempty"`

	// Sensitive Generated secret for the service principal.
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.LocalSecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// SCIM ID of the databricks_service_principal (not application ID).
	// +kubebuilder:validation:Optional
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// Status of the secret (i.e., ACTIVE - see REST API docs for full list).
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// - Changing this argument forces recreation of the secret.
	// +kubebuilder:validation:Optional
	TimeRotating *string `json:"timeRotating,omitempty" tf:"time_rotating,omitempty"`

	// UTC time when the secret was updated.
	// +kubebuilder:validation:Optional
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

// ServicePrincipalSecretSpec defines the desired state of ServicePrincipalSecret
type ServicePrincipalSecretSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ServicePrincipalSecretParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServicePrincipalSecretInitParameters `json:"initProvider,omitempty"`
}

// ServicePrincipalSecretStatus defines the observed state of ServicePrincipalSecret.
type ServicePrincipalSecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicePrincipalSecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServicePrincipalSecret is the Schema for the ServicePrincipalSecrets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type ServicePrincipalSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.servicePrincipalId) || (has(self.initProvider) && has(self.initProvider.servicePrincipalId))",message="spec.forProvider.servicePrincipalId is a required parameter"
	Spec   ServicePrincipalSecretSpec   `json:"spec"`
	Status ServicePrincipalSecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePrincipalSecretList contains a list of ServicePrincipalSecrets
type ServicePrincipalSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicePrincipalSecret `json:"items"`
}

// Repository type metadata.
var (
	ServicePrincipalSecret_Kind             = "ServicePrincipalSecret"
	ServicePrincipalSecret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServicePrincipalSecret_Kind}.String()
	ServicePrincipalSecret_KindAPIVersion   = ServicePrincipalSecret_Kind + "." + CRDGroupVersion.String()
	ServicePrincipalSecret_GroupVersionKind = CRDGroupVersion.WithKind(ServicePrincipalSecret_Kind)
)

func init() {
	SchemeBuilder.Register(&ServicePrincipalSecret{}, &ServicePrincipalSecretList{})
}
