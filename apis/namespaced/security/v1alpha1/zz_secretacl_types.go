// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type SecretACLInitParameters struct {

	// READ, WRITE or MANAGE.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// principal's identifier. It can be:
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// name of the scope
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type SecretACLObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// READ, WRITE or MANAGE.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// principal's identifier. It can be:
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// name of the scope
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type SecretACLParameters struct {

	// READ, WRITE or MANAGE.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// principal's identifier. It can be:
	// +kubebuilder:validation:Optional
	Principal *string `json:"principal,omitempty" tf:"principal,omitempty"`

	// name of the scope
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// SecretACLSpec defines the desired state of SecretACL
type SecretACLSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SecretACLParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretACLInitParameters `json:"initProvider,omitempty"`
}

// SecretACLStatus defines the observed state of SecretACL.
type SecretACLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretACLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretACL is the Schema for the SecretACLs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,databricks}
type SecretACL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permission) || (has(self.initProvider) && has(self.initProvider.permission))",message="spec.forProvider.permission is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.principal) || (has(self.initProvider) && has(self.initProvider.principal))",message="spec.forProvider.principal is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   SecretACLSpec   `json:"spec"`
	Status SecretACLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretACLList contains a list of SecretACLs
type SecretACLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretACL `json:"items"`
}

// Repository type metadata.
var (
	SecretACL_Kind             = "SecretACL"
	SecretACL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretACL_Kind}.String()
	SecretACL_KindAPIVersion   = SecretACL_Kind + "." + CRDGroupVersion.String()
	SecretACL_GroupVersionKind = CRDGroupVersion.WithKind(SecretACL_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretACL{}, &SecretACLList{})
}
