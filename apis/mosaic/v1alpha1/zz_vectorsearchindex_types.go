// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeltaSyncIndexSpecInitParameters struct {

	// array of objects representing columns that contain the embedding source.  Each entry consists of:
	EmbeddingSourceColumns []EmbeddingSourceColumnsInitParameters `json:"embeddingSourceColumns,omitempty" tf:"embedding_source_columns,omitempty"`

	// array of objects representing columns that contain the embedding vectors. Each entry consists of:
	EmbeddingVectorColumns []EmbeddingVectorColumnsInitParameters `json:"embeddingVectorColumns,omitempty" tf:"embedding_vector_columns,omitempty"`

	// Automatically sync the vector index contents and computed embeddings to the specified Delta table. The only supported table name is the index name with the suffix _writeback_table.
	EmbeddingWritebackTable *string `json:"embeddingWritebackTable,omitempty" tf:"embedding_writeback_table,omitempty"`

	// Pipeline execution mode. Possible values are:
	PipelineType *string `json:"pipelineType,omitempty" tf:"pipeline_type,omitempty"`

	// The name of the source table.
	SourceTable *string `json:"sourceTable,omitempty" tf:"source_table,omitempty"`
}

type DeltaSyncIndexSpecObservation struct {

	// array of objects representing columns that contain the embedding source.  Each entry consists of:
	EmbeddingSourceColumns []EmbeddingSourceColumnsObservation `json:"embeddingSourceColumns,omitempty" tf:"embedding_source_columns,omitempty"`

	// array of objects representing columns that contain the embedding vectors. Each entry consists of:
	EmbeddingVectorColumns []EmbeddingVectorColumnsObservation `json:"embeddingVectorColumns,omitempty" tf:"embedding_vector_columns,omitempty"`

	// Automatically sync the vector index contents and computed embeddings to the specified Delta table. The only supported table name is the index name with the suffix _writeback_table.
	EmbeddingWritebackTable *string `json:"embeddingWritebackTable,omitempty" tf:"embedding_writeback_table,omitempty"`

	// ID of the associated Delta Live Table pipeline.
	PipelineID *string `json:"pipelineId,omitempty" tf:"pipeline_id,omitempty"`

	// Pipeline execution mode. Possible values are:
	PipelineType *string `json:"pipelineType,omitempty" tf:"pipeline_type,omitempty"`

	// The name of the source table.
	SourceTable *string `json:"sourceTable,omitempty" tf:"source_table,omitempty"`
}

type DeltaSyncIndexSpecParameters struct {

	// array of objects representing columns that contain the embedding source.  Each entry consists of:
	// +kubebuilder:validation:Optional
	EmbeddingSourceColumns []EmbeddingSourceColumnsParameters `json:"embeddingSourceColumns,omitempty" tf:"embedding_source_columns,omitempty"`

	// array of objects representing columns that contain the embedding vectors. Each entry consists of:
	// +kubebuilder:validation:Optional
	EmbeddingVectorColumns []EmbeddingVectorColumnsParameters `json:"embeddingVectorColumns,omitempty" tf:"embedding_vector_columns,omitempty"`

	// Automatically sync the vector index contents and computed embeddings to the specified Delta table. The only supported table name is the index name with the suffix _writeback_table.
	// +kubebuilder:validation:Optional
	EmbeddingWritebackTable *string `json:"embeddingWritebackTable,omitempty" tf:"embedding_writeback_table,omitempty"`

	// Pipeline execution mode. Possible values are:
	// +kubebuilder:validation:Optional
	PipelineType *string `json:"pipelineType,omitempty" tf:"pipeline_type,omitempty"`

	// The name of the source table.
	// +kubebuilder:validation:Optional
	SourceTable *string `json:"sourceTable,omitempty" tf:"source_table,omitempty"`
}

type DirectAccessIndexSpecEmbeddingSourceColumnsInitParameters struct {

	// The name of the embedding model endpoint
	EmbeddingModelEndpointName *string `json:"embeddingModelEndpointName,omitempty" tf:"embedding_model_endpoint_name,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DirectAccessIndexSpecEmbeddingSourceColumnsObservation struct {

	// The name of the embedding model endpoint
	EmbeddingModelEndpointName *string `json:"embeddingModelEndpointName,omitempty" tf:"embedding_model_endpoint_name,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DirectAccessIndexSpecEmbeddingSourceColumnsParameters struct {

	// The name of the embedding model endpoint
	// +kubebuilder:validation:Optional
	EmbeddingModelEndpointName *string `json:"embeddingModelEndpointName,omitempty" tf:"embedding_model_endpoint_name,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DirectAccessIndexSpecEmbeddingVectorColumnsInitParameters struct {

	// Dimension of the embedding vector.
	EmbeddingDimension *float64 `json:"embeddingDimension,omitempty" tf:"embedding_dimension,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DirectAccessIndexSpecEmbeddingVectorColumnsObservation struct {

	// Dimension of the embedding vector.
	EmbeddingDimension *float64 `json:"embeddingDimension,omitempty" tf:"embedding_dimension,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DirectAccessIndexSpecEmbeddingVectorColumnsParameters struct {

	// Dimension of the embedding vector.
	// +kubebuilder:validation:Optional
	EmbeddingDimension *float64 `json:"embeddingDimension,omitempty" tf:"embedding_dimension,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DirectAccessIndexSpecInitParameters struct {

	// array of objects representing columns that contain the embedding source.  Each entry consists of:
	EmbeddingSourceColumns []DirectAccessIndexSpecEmbeddingSourceColumnsInitParameters `json:"embeddingSourceColumns,omitempty" tf:"embedding_source_columns,omitempty"`

	// array of objects representing columns that contain the embedding vectors. Each entry consists of:
	EmbeddingVectorColumns []DirectAccessIndexSpecEmbeddingVectorColumnsInitParameters `json:"embeddingVectorColumns,omitempty" tf:"embedding_vector_columns,omitempty"`

	// The schema of the index in JSON format.  Check the API documentation for a list of supported data types.
	SchemaJSON *string `json:"schemaJson,omitempty" tf:"schema_json,omitempty"`
}

type DirectAccessIndexSpecObservation struct {

	// array of objects representing columns that contain the embedding source.  Each entry consists of:
	EmbeddingSourceColumns []DirectAccessIndexSpecEmbeddingSourceColumnsObservation `json:"embeddingSourceColumns,omitempty" tf:"embedding_source_columns,omitempty"`

	// array of objects representing columns that contain the embedding vectors. Each entry consists of:
	EmbeddingVectorColumns []DirectAccessIndexSpecEmbeddingVectorColumnsObservation `json:"embeddingVectorColumns,omitempty" tf:"embedding_vector_columns,omitempty"`

	// The schema of the index in JSON format.  Check the API documentation for a list of supported data types.
	SchemaJSON *string `json:"schemaJson,omitempty" tf:"schema_json,omitempty"`
}

type DirectAccessIndexSpecParameters struct {

	// array of objects representing columns that contain the embedding source.  Each entry consists of:
	// +kubebuilder:validation:Optional
	EmbeddingSourceColumns []DirectAccessIndexSpecEmbeddingSourceColumnsParameters `json:"embeddingSourceColumns,omitempty" tf:"embedding_source_columns,omitempty"`

	// array of objects representing columns that contain the embedding vectors. Each entry consists of:
	// +kubebuilder:validation:Optional
	EmbeddingVectorColumns []DirectAccessIndexSpecEmbeddingVectorColumnsParameters `json:"embeddingVectorColumns,omitempty" tf:"embedding_vector_columns,omitempty"`

	// The schema of the index in JSON format.  Check the API documentation for a list of supported data types.
	// +kubebuilder:validation:Optional
	SchemaJSON *string `json:"schemaJson,omitempty" tf:"schema_json,omitempty"`
}

type EmbeddingSourceColumnsInitParameters struct {

	// The name of the embedding model endpoint
	EmbeddingModelEndpointName *string `json:"embeddingModelEndpointName,omitempty" tf:"embedding_model_endpoint_name,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EmbeddingSourceColumnsObservation struct {

	// The name of the embedding model endpoint
	EmbeddingModelEndpointName *string `json:"embeddingModelEndpointName,omitempty" tf:"embedding_model_endpoint_name,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EmbeddingSourceColumnsParameters struct {

	// The name of the embedding model endpoint
	// +kubebuilder:validation:Optional
	EmbeddingModelEndpointName *string `json:"embeddingModelEndpointName,omitempty" tf:"embedding_model_endpoint_name,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EmbeddingVectorColumnsInitParameters struct {

	// Dimension of the embedding vector.
	EmbeddingDimension *float64 `json:"embeddingDimension,omitempty" tf:"embedding_dimension,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EmbeddingVectorColumnsObservation struct {

	// Dimension of the embedding vector.
	EmbeddingDimension *float64 `json:"embeddingDimension,omitempty" tf:"embedding_dimension,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EmbeddingVectorColumnsParameters struct {

	// Dimension of the embedding vector.
	// +kubebuilder:validation:Optional
	EmbeddingDimension *float64 `json:"embeddingDimension,omitempty" tf:"embedding_dimension,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type StatusInitParameters struct {
}

type StatusObservation struct {

	// Index API Url to be used to perform operations on the index
	IndexURL *string `json:"indexUrl,omitempty" tf:"index_url,omitempty"`

	// Number of rows indexed
	IndexedRowCount *float64 `json:"indexedRowCount,omitempty" tf:"indexed_row_count,omitempty"`

	// Message associated with the index status
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Whether the index is ready for search
	Ready *bool `json:"ready,omitempty" tf:"ready,omitempty"`
}

type StatusParameters struct {
}

type VectorSearchIndexInitParameters struct {

	// (object) Specification for Delta Sync Index. Required if index_type is DELTA_SYNC. This field is a block and is documented below.
	DeltaSyncIndexSpec []DeltaSyncIndexSpecInitParameters `json:"deltaSyncIndexSpec,omitempty" tf:"delta_sync_index_spec,omitempty"`

	// (object) Specification for Direct Vector Access Index. Required if index_type is DIRECT_ACCESS. This field is a block and is documented below.
	DirectAccessIndexSpec []DirectAccessIndexSpecInitParameters `json:"directAccessIndexSpec,omitempty" tf:"direct_access_index_spec,omitempty"`

	// The name of the Mosaic AI Vector Search Endpoint that will be used for indexing the data.
	EndpointName *string `json:"endpointName,omitempty" tf:"endpoint_name,omitempty"`

	// Mosaic AI Vector Search index type. Currently supported values are:
	IndexType *string `json:"indexType,omitempty" tf:"index_type,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The column name that will be used as a primary key.
	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

type VectorSearchIndexObservation struct {

	// Creator of the endpoint.
	Creator *string `json:"creator,omitempty" tf:"creator,omitempty"`

	// (object) Specification for Delta Sync Index. Required if index_type is DELTA_SYNC. This field is a block and is documented below.
	DeltaSyncIndexSpec []DeltaSyncIndexSpecObservation `json:"deltaSyncIndexSpec,omitempty" tf:"delta_sync_index_spec,omitempty"`

	// (object) Specification for Direct Vector Access Index. Required if index_type is DIRECT_ACCESS. This field is a block and is documented below.
	DirectAccessIndexSpec []DirectAccessIndexSpecObservation `json:"directAccessIndexSpec,omitempty" tf:"direct_access_index_spec,omitempty"`

	// The name of the Mosaic AI Vector Search Endpoint that will be used for indexing the data.
	EndpointName *string `json:"endpointName,omitempty" tf:"endpoint_name,omitempty"`

	// The same as the name of the index.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Mosaic AI Vector Search index type. Currently supported values are:
	IndexType *string `json:"indexType,omitempty" tf:"index_type,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The column name that will be used as a primary key.
	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// Object describing the current status of the index consisting of the following fields:
	Status []StatusObservation `json:"status,omitempty" tf:"status,omitempty"`
}

type VectorSearchIndexParameters struct {

	// (object) Specification for Delta Sync Index. Required if index_type is DELTA_SYNC. This field is a block and is documented below.
	// +kubebuilder:validation:Optional
	DeltaSyncIndexSpec []DeltaSyncIndexSpecParameters `json:"deltaSyncIndexSpec,omitempty" tf:"delta_sync_index_spec,omitempty"`

	// (object) Specification for Direct Vector Access Index. Required if index_type is DIRECT_ACCESS. This field is a block and is documented below.
	// +kubebuilder:validation:Optional
	DirectAccessIndexSpec []DirectAccessIndexSpecParameters `json:"directAccessIndexSpec,omitempty" tf:"direct_access_index_spec,omitempty"`

	// The name of the Mosaic AI Vector Search Endpoint that will be used for indexing the data.
	// +kubebuilder:validation:Optional
	EndpointName *string `json:"endpointName,omitempty" tf:"endpoint_name,omitempty"`

	// Mosaic AI Vector Search index type. Currently supported values are:
	// +kubebuilder:validation:Optional
	IndexType *string `json:"indexType,omitempty" tf:"index_type,omitempty"`

	// Three-level name of the Mosaic AI Vector Search Index to create (catalog.schema.index_name).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The column name that will be used as a primary key.
	// +kubebuilder:validation:Optional
	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`
}

// VectorSearchIndexSpec defines the desired state of VectorSearchIndex
type VectorSearchIndexSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VectorSearchIndexParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VectorSearchIndexInitParameters `json:"initProvider,omitempty"`
}

// VectorSearchIndexStatus defines the observed state of VectorSearchIndex.
type VectorSearchIndexStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VectorSearchIndexObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VectorSearchIndex is the Schema for the VectorSearchIndexs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type VectorSearchIndex struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpointName) || (has(self.initProvider) && has(self.initProvider.endpointName))",message="spec.forProvider.endpointName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.indexType) || (has(self.initProvider) && has(self.initProvider.indexType))",message="spec.forProvider.indexType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.primaryKey) || (has(self.initProvider) && has(self.initProvider.primaryKey))",message="spec.forProvider.primaryKey is a required parameter"
	Spec   VectorSearchIndexSpec   `json:"spec"`
	Status VectorSearchIndexStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VectorSearchIndexList contains a list of VectorSearchIndexs
type VectorSearchIndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VectorSearchIndex `json:"items"`
}

// Repository type metadata.
var (
	VectorSearchIndex_Kind             = "VectorSearchIndex"
	VectorSearchIndex_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VectorSearchIndex_Kind}.String()
	VectorSearchIndex_KindAPIVersion   = VectorSearchIndex_Kind + "." + CRDGroupVersion.String()
	VectorSearchIndex_GroupVersionKind = CRDGroupVersion.WithKind(VectorSearchIndex_Kind)
)

func init() {
	SchemeBuilder.Register(&VectorSearchIndex{}, &VectorSearchIndexList{})
}
