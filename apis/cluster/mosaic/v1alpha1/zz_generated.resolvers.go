// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *VectorSearchIndex) ResolveReferences( // ResolveReferences of this VectorSearchIndex.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DeltaSyncIndexSpec); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("serving.databricks.crossplane.io", "v1alpha1", "ModelServing", "ModelServingList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointName),
					Extract:      resource.ExtractParamPath("name", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointNameRef,
					Selector:     mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointName")
			}
			mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointNameRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("mosaic.databricks.crossplane.io", "v1alpha1", "VectorSearchEndpoint", "VectorSearchEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.EndpointName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.EndpointNameRef,
			Selector:     mg.Spec.ForProvider.EndpointNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.EndpointName")
	}
	mg.Spec.ForProvider.EndpointName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.EndpointNameRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.DeltaSyncIndexSpec); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("serving.databricks.crossplane.io", "v1alpha1", "ModelServing", "ModelServingList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointName),
					Extract:      resource.ExtractParamPath("name", false),
					Namespace:    mg.GetNamespace(),
					Reference:    mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointNameRef,
					Selector:     mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointNameSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointName")
			}
			mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.DeltaSyncIndexSpec[i3].EmbeddingSourceColumns[i4].EmbeddingModelEndpointNameRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("mosaic.databricks.crossplane.io", "v1alpha1", "VectorSearchEndpoint", "VectorSearchEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.EndpointName),
			Extract:      resource.ExtractParamPath("name", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.EndpointNameRef,
			Selector:     mg.Spec.InitProvider.EndpointNameSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.EndpointName")
	}
	mg.Spec.InitProvider.EndpointName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.EndpointNameRef = rsp.ResolvedReference

	return nil
}
