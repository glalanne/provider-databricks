// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type DbfsFileInitParameters struct {

	// Encoded file contents. Conflicts with source.
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// The path of the file in which you wish to save.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The full absolute path to the file. Conflicts with content_base64.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type DbfsFileObservation struct {

	// Encoded file contents. Conflicts with source.
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// Path, but with dbfs: prefix.
	DbfsPath *string `json:"dbfsPath,omitempty" tf:"dbfs_path,omitempty"`

	// The file size of the file that is being tracked by this resource in bytes.
	FileSize *float64 `json:"fileSize,omitempty" tf:"file_size,omitempty"`

	// Same as path.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// The path of the file in which you wish to save.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The full absolute path to the file. Conflicts with content_base64.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type DbfsFileParameters struct {

	// Encoded file contents. Conflicts with source.
	// +kubebuilder:validation:Optional
	ContentBase64 *string `json:"contentBase64,omitempty" tf:"content_base64,omitempty"`

	// +kubebuilder:validation:Optional
	Md5 *string `json:"md5,omitempty" tf:"md5,omitempty"`

	// The path of the file in which you wish to save.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The full absolute path to the file. Conflicts with content_base64.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

// DbfsFileSpec defines the desired state of DbfsFile
type DbfsFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DbfsFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DbfsFileInitParameters `json:"initProvider,omitempty"`
}

// DbfsFileStatus defines the observed state of DbfsFile.
type DbfsFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DbfsFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DbfsFile is the Schema for the DbfsFiles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type DbfsFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	Spec   DbfsFileSpec   `json:"spec"`
	Status DbfsFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DbfsFileList contains a list of DbfsFiles
type DbfsFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DbfsFile `json:"items"`
}

// Repository type metadata.
var (
	DbfsFile_Kind             = "DbfsFile"
	DbfsFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DbfsFile_Kind}.String()
	DbfsFile_KindAPIVersion   = DbfsFile_Kind + "." + CRDGroupVersion.String()
	DbfsFile_GroupVersionKind = CRDGroupVersion.WithKind(DbfsFile_Kind)
)

func init() {
	SchemeBuilder.Register(&DbfsFile{}, &DbfsFileList{})
}
