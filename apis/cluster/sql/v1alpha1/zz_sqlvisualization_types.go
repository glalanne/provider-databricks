// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type SQLVisualizationInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Options *string `json:"options,omitempty" tf:"options,omitempty"`

	// +crossplane:generate:reference:type=github.com/glalanne/provider-databricks/apis/cluster/sql/v1alpha1.SQLQuery
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Reference to a SQLQuery in sql to populate queryId.
	// +kubebuilder:validation:Optional
	QueryIDRef *v1.Reference `json:"queryIdRef,omitempty" tf:"-"`

	// Selector for a SQLQuery in sql to populate queryId.
	// +kubebuilder:validation:Optional
	QueryIDSelector *v1.Selector `json:"queryIdSelector,omitempty" tf:"-"`

	QueryPlan *string `json:"queryPlan,omitempty" tf:"query_plan,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	VisualizationID *string `json:"visualizationId,omitempty" tf:"visualization_id,omitempty"`
}

type SQLVisualizationObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Options *string `json:"options,omitempty" tf:"options,omitempty"`

	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	QueryPlan *string `json:"queryPlan,omitempty" tf:"query_plan,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	VisualizationID *string `json:"visualizationId,omitempty" tf:"visualization_id,omitempty"`
}

type SQLVisualizationParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Options *string `json:"options,omitempty" tf:"options,omitempty"`

	// +crossplane:generate:reference:type=github.com/glalanne/provider-databricks/apis/cluster/sql/v1alpha1.SQLQuery
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	QueryID *string `json:"queryId,omitempty" tf:"query_id,omitempty"`

	// Reference to a SQLQuery in sql to populate queryId.
	// +kubebuilder:validation:Optional
	QueryIDRef *v1.Reference `json:"queryIdRef,omitempty" tf:"-"`

	// Selector for a SQLQuery in sql to populate queryId.
	// +kubebuilder:validation:Optional
	QueryIDSelector *v1.Selector `json:"queryIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	QueryPlan *string `json:"queryPlan,omitempty" tf:"query_plan,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VisualizationID *string `json:"visualizationId,omitempty" tf:"visualization_id,omitempty"`
}

// SQLVisualizationSpec defines the desired state of SQLVisualization
type SQLVisualizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQLVisualizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SQLVisualizationInitParameters `json:"initProvider,omitempty"`
}

// SQLVisualizationStatus defines the observed state of SQLVisualization.
type SQLVisualizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLVisualizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SQLVisualization is the Schema for the SQLVisualizations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type SQLVisualization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.options) || (has(self.initProvider) && has(self.initProvider.options))",message="spec.forProvider.options is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   SQLVisualizationSpec   `json:"spec"`
	Status SQLVisualizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLVisualizationList contains a list of SQLVisualizations
type SQLVisualizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLVisualization `json:"items"`
}

// Repository type metadata.
var (
	SQLVisualization_Kind             = "SQLVisualization"
	SQLVisualization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLVisualization_Kind}.String()
	SQLVisualization_KindAPIVersion   = SQLVisualization_Kind + "." + CRDGroupVersion.String()
	SQLVisualization_GroupVersionKind = CRDGroupVersion.WithKind(SQLVisualization_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLVisualization{}, &SQLVisualizationList{})
}
