// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *GroupMember) ResolveReferences( // ResolveReferences of this GroupMember.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("security.databricks.crossplane.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.GroupIDRef,
			Selector:     mg.Spec.ForProvider.GroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupID")
	}
	mg.Spec.ForProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("security.databricks.crossplane.io", "v1alpha1", "Group", "GroupList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.GroupIDRef,
			Selector:     mg.Spec.InitProvider.GroupIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupID")
	}
	mg.Spec.InitProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Permissions.
func (mg *Permissions) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AccessControl); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.crossplane.io", "v1alpha1", "ServicePrincipal", "ServicePrincipalList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AccessControl[i3].ServicePrincipalName),
				Extract:      resource.ExtractParamPath("application_id", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.ForProvider.AccessControl[i3].ServicePrincipalNameRef,
				Selector:     mg.Spec.ForProvider.AccessControl[i3].ServicePrincipalNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AccessControl[i3].ServicePrincipalName")
		}
		mg.Spec.ForProvider.AccessControl[i3].ServicePrincipalName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AccessControl[i3].ServicePrincipalNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ClusterIDRef,
			Selector:     mg.Spec.ForProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "ClusterPolicy", "ClusterPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterPolicyID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.ClusterPolicyIDRef,
			Selector:     mg.Spec.ForProvider.ClusterPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterPolicyID")
	}
	mg.Spec.ForProvider.ClusterPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "InstancePool", "InstancePoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstancePoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.InstancePoolIDRef,
			Selector:     mg.Spec.ForProvider.InstancePoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstancePoolID")
	}
	mg.Spec.ForProvider.InstancePoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstancePoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.JobID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.JobIDRef,
			Selector:     mg.Spec.ForProvider.JobIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.JobID")
	}
	mg.Spec.ForProvider.JobID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.JobIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("workspace.databricks.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NotebookID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NotebookIDRef,
			Selector:     mg.Spec.ForProvider.NotebookIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NotebookID")
	}
	mg.Spec.ForProvider.NotebookID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NotebookIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "Pipeline", "PipelineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PipelineID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.PipelineIDRef,
			Selector:     mg.Spec.ForProvider.PipelineIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PipelineID")
	}
	mg.Spec.ForProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PipelineIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLAlert", "SQLAlertList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SQLAlertID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SQLAlertIDRef,
			Selector:     mg.Spec.ForProvider.SQLAlertIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLAlertID")
	}
	mg.Spec.ForProvider.SQLAlertID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLAlertIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLDashboard", "SQLDashboardList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SQLDashboardID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SQLDashboardIDRef,
			Selector:     mg.Spec.ForProvider.SQLDashboardIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLDashboardID")
	}
	mg.Spec.ForProvider.SQLDashboardID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLDashboardIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SQLEndpointID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SQLEndpointIDRef,
			Selector:     mg.Spec.ForProvider.SQLEndpointIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLEndpointID")
	}
	mg.Spec.ForProvider.SQLEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLEndpointIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SQLQueryID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.SQLQueryIDRef,
			Selector:     mg.Spec.ForProvider.SQLQueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SQLQueryID")
	}
	mg.Spec.ForProvider.SQLQueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SQLQueryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.AccessControl); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("security.databricks.crossplane.io", "v1alpha1", "ServicePrincipal", "ServicePrincipalList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AccessControl[i3].ServicePrincipalName),
				Extract:      resource.ExtractParamPath("application_id", false),
				Namespace:    mg.GetNamespace(),
				Reference:    mg.Spec.InitProvider.AccessControl[i3].ServicePrincipalNameRef,
				Selector:     mg.Spec.InitProvider.AccessControl[i3].ServicePrincipalNameSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AccessControl[i3].ServicePrincipalName")
		}
		mg.Spec.InitProvider.AccessControl[i3].ServicePrincipalName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AccessControl[i3].ServicePrincipalNameRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "Cluster", "ClusterList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ClusterIDRef,
			Selector:     mg.Spec.InitProvider.ClusterIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "ClusterPolicy", "ClusterPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterPolicyID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.ClusterPolicyIDRef,
			Selector:     mg.Spec.InitProvider.ClusterPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterPolicyID")
	}
	mg.Spec.InitProvider.ClusterPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "InstancePool", "InstancePoolList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.InstancePoolID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.InstancePoolIDRef,
			Selector:     mg.Spec.InitProvider.InstancePoolIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.InstancePoolID")
	}
	mg.Spec.InitProvider.InstancePoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.InstancePoolIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "Job", "JobList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.JobID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.JobIDRef,
			Selector:     mg.Spec.InitProvider.JobIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.JobID")
	}
	mg.Spec.InitProvider.JobID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.JobIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("workspace.databricks.crossplane.io", "v1alpha1", "Notebook", "NotebookList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NotebookID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NotebookIDRef,
			Selector:     mg.Spec.InitProvider.NotebookIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NotebookID")
	}
	mg.Spec.InitProvider.NotebookID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NotebookIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("compute.databricks.crossplane.io", "v1alpha1", "Pipeline", "PipelineList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PipelineID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.PipelineIDRef,
			Selector:     mg.Spec.InitProvider.PipelineIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PipelineID")
	}
	mg.Spec.InitProvider.PipelineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PipelineIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLAlert", "SQLAlertList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SQLAlertID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SQLAlertIDRef,
			Selector:     mg.Spec.InitProvider.SQLAlertIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SQLAlertID")
	}
	mg.Spec.InitProvider.SQLAlertID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SQLAlertIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLDashboard", "SQLDashboardList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SQLDashboardID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SQLDashboardIDRef,
			Selector:     mg.Spec.InitProvider.SQLDashboardIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SQLDashboardID")
	}
	mg.Spec.InitProvider.SQLDashboardID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SQLDashboardIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLEndpoint", "SQLEndpointList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SQLEndpointID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SQLEndpointIDRef,
			Selector:     mg.Spec.InitProvider.SQLEndpointIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SQLEndpointID")
	}
	mg.Spec.InitProvider.SQLEndpointID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SQLEndpointIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("sql.databricks.crossplane.io", "v1alpha1", "SQLQuery", "SQLQueryList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SQLQueryID),
			Extract:      reference.ExternalName(),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.SQLQueryIDRef,
			Selector:     mg.Spec.InitProvider.SQLQueryIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SQLQueryID")
	}
	mg.Spec.InitProvider.SQLQueryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SQLQueryIDRef = rsp.ResolvedReference

	return nil
}
