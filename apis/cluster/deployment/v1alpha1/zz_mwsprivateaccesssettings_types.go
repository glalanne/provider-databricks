// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type MwsPrivateAccessSettingsInitParameters struct {

	// the ID of the Private Access Settings in form of account_id/private_access_settings_id.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// An array of databricks_mws_vpc_endpoint vpc_endpoint_id (not id). Only used when private_access_level is set to ENDPOINT. This is an allow list of databricks_mws_vpc_endpoint that in your account that can connect to your databricks_mws_workspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting public_access_enabled to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVPCEndpointIds []*string `json:"allowedVpcEndpointIds,omitempty" tf:"allowed_vpc_endpoint_ids,omitempty"`

	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. ACCOUNT level access (default) lets only databricks_mws_vpc_endpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. ENDPOINT level access lets only specified databricks_mws_vpc_endpoint connect to your workspace. Please see the allowed_vpc_endpoint_ids documentation for more details.
	PrivateAccessLevel *string `json:"privateAccessLevel,omitempty" tf:"private_access_level,omitempty"`

	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsID *string `json:"privateAccessSettingsId,omitempty" tf:"private_access_settings_id,omitempty"`

	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName *string `json:"privateAccessSettingsName,omitempty" tf:"private_access_settings_name,omitempty"`

	// If true, the databricks_mws_workspaces can be accessed over the databricks_mws_vpc_endpoint as well as over the public network. In such a case, you could also configure an databricks_ip_access_list for the workspace, to restrict the source networks that could be used to access it over the public network. If false, the workspace can be accessed only over VPC endpoints, and not over the public network. Once explicitly set, this field becomes mandatory.
	PublicAccessEnabled *bool `json:"publicAccessEnabled,omitempty" tf:"public_access_enabled,omitempty"`

	// Region of AWS VPC or the Google Cloud VPC network
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type MwsPrivateAccessSettingsObservation struct {

	// the ID of the Private Access Settings in form of account_id/private_access_settings_id.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// An array of databricks_mws_vpc_endpoint vpc_endpoint_id (not id). Only used when private_access_level is set to ENDPOINT. This is an allow list of databricks_mws_vpc_endpoint that in your account that can connect to your databricks_mws_workspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting public_access_enabled to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	AllowedVPCEndpointIds []*string `json:"allowedVpcEndpointIds,omitempty" tf:"allowed_vpc_endpoint_ids,omitempty"`

	// the ID of the Private Access Settings in form of account_id/private_access_settings_id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. ACCOUNT level access (default) lets only databricks_mws_vpc_endpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. ENDPOINT level access lets only specified databricks_mws_vpc_endpoint connect to your workspace. Please see the allowed_vpc_endpoint_ids documentation for more details.
	PrivateAccessLevel *string `json:"privateAccessLevel,omitempty" tf:"private_access_level,omitempty"`

	// Canonical unique identifier of Private Access Settings in Databricks Account
	PrivateAccessSettingsID *string `json:"privateAccessSettingsId,omitempty" tf:"private_access_settings_id,omitempty"`

	// Name of Private Access Settings in Databricks Account
	PrivateAccessSettingsName *string `json:"privateAccessSettingsName,omitempty" tf:"private_access_settings_name,omitempty"`

	// If true, the databricks_mws_workspaces can be accessed over the databricks_mws_vpc_endpoint as well as over the public network. In such a case, you could also configure an databricks_ip_access_list for the workspace, to restrict the source networks that could be used to access it over the public network. If false, the workspace can be accessed only over VPC endpoints, and not over the public network. Once explicitly set, this field becomes mandatory.
	PublicAccessEnabled *bool `json:"publicAccessEnabled,omitempty" tf:"public_access_enabled,omitempty"`

	// Region of AWS VPC or the Google Cloud VPC network
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type MwsPrivateAccessSettingsParameters struct {

	// the ID of the Private Access Settings in form of account_id/private_access_settings_id.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// An array of databricks_mws_vpc_endpoint vpc_endpoint_id (not id). Only used when private_access_level is set to ENDPOINT. This is an allow list of databricks_mws_vpc_endpoint that in your account that can connect to your databricks_mws_workspaces over AWS PrivateLink. If hybrid access to your workspace is enabled by setting public_access_enabled to true, then this control only works for PrivateLink connections. To control how your workspace is accessed via public internet, see the article for databricks_ip_access_list.
	// +kubebuilder:validation:Optional
	AllowedVPCEndpointIds []*string `json:"allowedVpcEndpointIds,omitempty" tf:"allowed_vpc_endpoint_ids,omitempty"`

	// The private access level controls which VPC endpoints can connect to the UI or API of any workspace that attaches this private access settings object. ACCOUNT level access (default) lets only databricks_mws_vpc_endpoint that are registered in your Databricks account connect to your databricks_mws_workspaces. ENDPOINT level access lets only specified databricks_mws_vpc_endpoint connect to your workspace. Please see the allowed_vpc_endpoint_ids documentation for more details.
	// +kubebuilder:validation:Optional
	PrivateAccessLevel *string `json:"privateAccessLevel,omitempty" tf:"private_access_level,omitempty"`

	// Canonical unique identifier of Private Access Settings in Databricks Account
	// +kubebuilder:validation:Optional
	PrivateAccessSettingsID *string `json:"privateAccessSettingsId,omitempty" tf:"private_access_settings_id,omitempty"`

	// Name of Private Access Settings in Databricks Account
	// +kubebuilder:validation:Optional
	PrivateAccessSettingsName *string `json:"privateAccessSettingsName,omitempty" tf:"private_access_settings_name,omitempty"`

	// If true, the databricks_mws_workspaces can be accessed over the databricks_mws_vpc_endpoint as well as over the public network. In such a case, you could also configure an databricks_ip_access_list for the workspace, to restrict the source networks that could be used to access it over the public network. If false, the workspace can be accessed only over VPC endpoints, and not over the public network. Once explicitly set, this field becomes mandatory.
	// +kubebuilder:validation:Optional
	PublicAccessEnabled *bool `json:"publicAccessEnabled,omitempty" tf:"public_access_enabled,omitempty"`

	// Region of AWS VPC or the Google Cloud VPC network
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// MwsPrivateAccessSettingsSpec defines the desired state of MwsPrivateAccessSettings
type MwsPrivateAccessSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MwsPrivateAccessSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MwsPrivateAccessSettingsInitParameters `json:"initProvider,omitempty"`
}

// MwsPrivateAccessSettingsStatus defines the observed state of MwsPrivateAccessSettings.
type MwsPrivateAccessSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MwsPrivateAccessSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MwsPrivateAccessSettings is the Schema for the MwsPrivateAccessSettingss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type MwsPrivateAccessSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateAccessSettingsName) || (has(self.initProvider) && has(self.initProvider.privateAccessSettingsName))",message="spec.forProvider.privateAccessSettingsName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   MwsPrivateAccessSettingsSpec   `json:"spec"`
	Status MwsPrivateAccessSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MwsPrivateAccessSettingsList contains a list of MwsPrivateAccessSettingss
type MwsPrivateAccessSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MwsPrivateAccessSettings `json:"items"`
}

// Repository type metadata.
var (
	MwsPrivateAccessSettings_Kind             = "MwsPrivateAccessSettings"
	MwsPrivateAccessSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MwsPrivateAccessSettings_Kind}.String()
	MwsPrivateAccessSettings_KindAPIVersion   = MwsPrivateAccessSettings_Kind + "." + CRDGroupVersion.String()
	MwsPrivateAccessSettings_GroupVersionKind = CRDGroupVersion.WithKind(MwsPrivateAccessSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&MwsPrivateAccessSettings{}, &MwsPrivateAccessSettingsList{})
}
