// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code transformed by upjet. DO NOT EDIT.

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	xpresource "github.com/crossplane/crossplane-runtime/v2/pkg/resource"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	apisresolver "github.com/glalanne/provider-databricks/internal/apis"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *MwsNccBinding) ResolveReferences( // ResolveReferences of this MwsNccBinding.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsNetworkConnectivityConfig", "MwsNetworkConnectivityConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkConnectivityConfigID),
			Extract:      resource.ExtractParamPath("network_connectivity_config_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NetworkConnectivityConfigIDRef,
			Selector:     mg.Spec.ForProvider.NetworkConnectivityConfigIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkConnectivityConfigID")
	}
	mg.Spec.ForProvider.NetworkConnectivityConfigID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkConnectivityConfigIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsNetworkConnectivityConfig", "MwsNetworkConnectivityConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkConnectivityConfigID),
			Extract:      resource.ExtractParamPath("network_connectivity_config_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NetworkConnectivityConfigIDRef,
			Selector:     mg.Spec.InitProvider.NetworkConnectivityConfigIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkConnectivityConfigID")
	}
	mg.Spec.InitProvider.NetworkConnectivityConfigID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkConnectivityConfigIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MwsNccPrivateEndpointRule.
func (mg *MwsNccPrivateEndpointRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsNetworkConnectivityConfig", "MwsNetworkConnectivityConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkConnectivityConfigID),
			Extract:      resource.ExtractParamPath("network_connectivity_config_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NetworkConnectivityConfigIDRef,
			Selector:     mg.Spec.ForProvider.NetworkConnectivityConfigIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkConnectivityConfigID")
	}
	mg.Spec.ForProvider.NetworkConnectivityConfigID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkConnectivityConfigIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsNetworkConnectivityConfig", "MwsNetworkConnectivityConfigList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkConnectivityConfigID),
			Extract:      resource.ExtractParamPath("network_connectivity_config_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NetworkConnectivityConfigIDRef,
			Selector:     mg.Spec.InitProvider.NetworkConnectivityConfigIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkConnectivityConfigID")
	}
	mg.Spec.InitProvider.NetworkConnectivityConfigID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkConnectivityConfigIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MwsNetworks.
func (mg *MwsNetworks) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.VPCEndpoints); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsVPCEndpoint", "MwsVPCEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCEndpoints[i3].DataplaneRelay),
				Extract:       resource.ExtractParamPath("vpc_endpoint_id", false),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.VPCEndpoints[i3].DataplaneRelayRefs,
				Selector:      mg.Spec.ForProvider.VPCEndpoints[i3].DataplaneRelaySelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpoints[i3].DataplaneRelay")
		}
		mg.Spec.ForProvider.VPCEndpoints[i3].DataplaneRelay = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCEndpoints[i3].DataplaneRelayRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VPCEndpoints); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsVPCEndpoint", "MwsVPCEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.VPCEndpoints[i3].RestAPI),
				Extract:       resource.ExtractParamPath("vpc_endpoint_id", false),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.ForProvider.VPCEndpoints[i3].RestAPIRefs,
				Selector:      mg.Spec.ForProvider.VPCEndpoints[i3].RestAPISelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VPCEndpoints[i3].RestAPI")
		}
		mg.Spec.ForProvider.VPCEndpoints[i3].RestAPI = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.VPCEndpoints[i3].RestAPIRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VPCEndpoints); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsVPCEndpoint", "MwsVPCEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCEndpoints[i3].DataplaneRelay),
				Extract:       resource.ExtractParamPath("vpc_endpoint_id", false),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.VPCEndpoints[i3].DataplaneRelayRefs,
				Selector:      mg.Spec.InitProvider.VPCEndpoints[i3].DataplaneRelaySelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCEndpoints[i3].DataplaneRelay")
		}
		mg.Spec.InitProvider.VPCEndpoints[i3].DataplaneRelay = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCEndpoints[i3].DataplaneRelayRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.VPCEndpoints); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsVPCEndpoint", "MwsVPCEndpointList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.VPCEndpoints[i3].RestAPI),
				Extract:       resource.ExtractParamPath("vpc_endpoint_id", false),
				Namespace:     mg.GetNamespace(),
				References:    mg.Spec.InitProvider.VPCEndpoints[i3].RestAPIRefs,
				Selector:      mg.Spec.InitProvider.VPCEndpoints[i3].RestAPISelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.VPCEndpoints[i3].RestAPI")
		}
		mg.Spec.InitProvider.VPCEndpoints[i3].RestAPI = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.VPCEndpoints[i3].RestAPIRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this MwsWorkspaces.
func (mg *MwsWorkspaces) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsCredentials", "MwsCredentialsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CredentialsID),
			Extract:      resource.ExtractParamPath("credentials_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.CredentialsIDRef,
			Selector:     mg.Spec.ForProvider.CredentialsIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CredentialsID")
	}
	mg.Spec.ForProvider.CredentialsID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CredentialsIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsNetworks", "MwsNetworksList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
			Extract:      resource.ExtractParamPath("network_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.NetworkIDRef,
			Selector:     mg.Spec.ForProvider.NetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsStorageConfigurations", "MwsStorageConfigurationsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageConfigurationID),
			Extract:      resource.ExtractParamPath("storage_configuration_id", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.ForProvider.StorageConfigurationIDRef,
			Selector:     mg.Spec.ForProvider.StorageConfigurationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageConfigurationID")
	}
	mg.Spec.ForProvider.StorageConfigurationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageConfigurationIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsCredentials", "MwsCredentialsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CredentialsID),
			Extract:      resource.ExtractParamPath("credentials_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.CredentialsIDRef,
			Selector:     mg.Spec.InitProvider.CredentialsIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CredentialsID")
	}
	mg.Spec.InitProvider.CredentialsID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CredentialsIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsNetworks", "MwsNetworksList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
			Extract:      resource.ExtractParamPath("network_id", false),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.NetworkIDRef,
			Selector:     mg.Spec.InitProvider.NetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("deployment.databricks.crossplane.io", "v1alpha1", "MwsStorageConfigurations", "MwsStorageConfigurationsList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.StorageConfigurationID),
			Extract:      resource.ExtractParamPath("storage_configuration_id", true),
			Namespace:    mg.GetNamespace(),
			Reference:    mg.Spec.InitProvider.StorageConfigurationIDRef,
			Selector:     mg.Spec.InitProvider.StorageConfigurationIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.StorageConfigurationID")
	}
	mg.Spec.InitProvider.StorageConfigurationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.StorageConfigurationIDRef = rsp.ResolvedReference

	return nil
}
