// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionConfigurationsInitParameters struct {
	ActionConfigurationID *string `json:"actionConfigurationId,omitempty" tf:"action_configuration_id,omitempty"`

	// The type of action to take when the budget alert is triggered. (Enum: EMAIL_NOTIFICATION)
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// The target of the action. For EMAIL_NOTIFICATION, this is the email address to send the notification to.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ActionConfigurationsObservation struct {
	ActionConfigurationID *string `json:"actionConfigurationId,omitempty" tf:"action_configuration_id,omitempty"`

	// The type of action to take when the budget alert is triggered. (Enum: EMAIL_NOTIFICATION)
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// The target of the action. For EMAIL_NOTIFICATION, this is the email address to send the notification to.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type ActionConfigurationsParameters struct {

	// +kubebuilder:validation:Optional
	ActionConfigurationID *string `json:"actionConfigurationId,omitempty" tf:"action_configuration_id,omitempty"`

	// The type of action to take when the budget alert is triggered. (Enum: EMAIL_NOTIFICATION)
	// +kubebuilder:validation:Optional
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// The target of the action. For EMAIL_NOTIFICATION, this is the email address to send the notification to.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type AlertConfigurationsInitParameters struct {

	// List of action configurations to take when the budget alert is triggered. Consists of the following fields:
	ActionConfigurations []ActionConfigurationsInitParameters `json:"actionConfigurations,omitempty" tf:"action_configurations,omitempty"`

	AlertConfigurationID *string `json:"alertConfigurationId,omitempty" tf:"alert_configuration_id,omitempty"`

	// The threshold for the budget alert to determine if it is in a triggered state. The number is evaluated based on quantity_type.
	QuantityThreshold *string `json:"quantityThreshold,omitempty" tf:"quantity_threshold,omitempty"`

	// The way to calculate cost for this budget alert. This is what quantity_threshold is measured in. (Enum: LIST_PRICE_DOLLARS_USD)
	QuantityType *string `json:"quantityType,omitempty" tf:"quantity_type,omitempty"`

	// The time window of usage data for the budget. (Enum: MONTH)
	TimePeriod *string `json:"timePeriod,omitempty" tf:"time_period,omitempty"`

	// The evaluation method to determine when this budget alert is in a triggered state. (Enum: CUMULATIVE_SPENDING_EXCEEDED)
	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

type AlertConfigurationsObservation struct {

	// List of action configurations to take when the budget alert is triggered. Consists of the following fields:
	ActionConfigurations []ActionConfigurationsObservation `json:"actionConfigurations,omitempty" tf:"action_configurations,omitempty"`

	AlertConfigurationID *string `json:"alertConfigurationId,omitempty" tf:"alert_configuration_id,omitempty"`

	// The threshold for the budget alert to determine if it is in a triggered state. The number is evaluated based on quantity_type.
	QuantityThreshold *string `json:"quantityThreshold,omitempty" tf:"quantity_threshold,omitempty"`

	// The way to calculate cost for this budget alert. This is what quantity_threshold is measured in. (Enum: LIST_PRICE_DOLLARS_USD)
	QuantityType *string `json:"quantityType,omitempty" tf:"quantity_type,omitempty"`

	// The time window of usage data for the budget. (Enum: MONTH)
	TimePeriod *string `json:"timePeriod,omitempty" tf:"time_period,omitempty"`

	// The evaluation method to determine when this budget alert is in a triggered state. (Enum: CUMULATIVE_SPENDING_EXCEEDED)
	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

type AlertConfigurationsParameters struct {

	// List of action configurations to take when the budget alert is triggered. Consists of the following fields:
	// +kubebuilder:validation:Optional
	ActionConfigurations []ActionConfigurationsParameters `json:"actionConfigurations,omitempty" tf:"action_configurations,omitempty"`

	// +kubebuilder:validation:Optional
	AlertConfigurationID *string `json:"alertConfigurationId,omitempty" tf:"alert_configuration_id,omitempty"`

	// The threshold for the budget alert to determine if it is in a triggered state. The number is evaluated based on quantity_type.
	// +kubebuilder:validation:Optional
	QuantityThreshold *string `json:"quantityThreshold,omitempty" tf:"quantity_threshold,omitempty"`

	// The way to calculate cost for this budget alert. This is what quantity_threshold is measured in. (Enum: LIST_PRICE_DOLLARS_USD)
	// +kubebuilder:validation:Optional
	QuantityType *string `json:"quantityType,omitempty" tf:"quantity_type,omitempty"`

	// The time window of usage data for the budget. (Enum: MONTH)
	// +kubebuilder:validation:Optional
	TimePeriod *string `json:"timePeriod,omitempty" tf:"time_period,omitempty"`

	// The evaluation method to determine when this budget alert is in a triggered state. (Enum: CUMULATIVE_SPENDING_EXCEEDED)
	// +kubebuilder:validation:Optional
	TriggerType *string `json:"triggerType,omitempty" tf:"trigger_type,omitempty"`
}

type BudgetInitParameters struct {

	// The ID of the Databricks Account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	AlertConfigurations []AlertConfigurationsInitParameters `json:"alertConfigurations,omitempty" tf:"alert_configurations,omitempty"`

	// The ID of the budget configuration.
	BudgetConfigurationID *string `json:"budgetConfigurationId,omitempty" tf:"budget_configuration_id,omitempty"`

	CreateTime *float64 `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Name of the budget in Databricks Account.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	UpdateTime *float64 `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type BudgetObservation struct {

	// The ID of the Databricks Account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	AlertConfigurations []AlertConfigurationsObservation `json:"alertConfigurations,omitempty" tf:"alert_configurations,omitempty"`

	// The ID of the budget configuration.
	BudgetConfigurationID *string `json:"budgetConfigurationId,omitempty" tf:"budget_configuration_id,omitempty"`

	CreateTime *float64 `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Name of the budget in Databricks Account.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *float64 `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type BudgetParameters struct {

	// The ID of the Databricks Account.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	AlertConfigurations []AlertConfigurationsParameters `json:"alertConfigurations,omitempty" tf:"alert_configurations,omitempty"`

	// The ID of the budget configuration.
	// +kubebuilder:validation:Optional
	BudgetConfigurationID *string `json:"budgetConfigurationId,omitempty" tf:"budget_configuration_id,omitempty"`

	// +kubebuilder:validation:Optional
	CreateTime *float64 `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Name of the budget in Databricks Account.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	UpdateTime *float64 `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type FilterInitParameters struct {

	// List of tags to filter by. Consists of the following fields:
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// Filter by workspace ID (if empty, include usage all usage for this account). Consists of the following fields:
	WorkspaceID []WorkspaceIDInitParameters `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type FilterObservation struct {

	// List of tags to filter by. Consists of the following fields:
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// Filter by workspace ID (if empty, include usage all usage for this account). Consists of the following fields:
	WorkspaceID []WorkspaceIDObservation `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type FilterParameters struct {

	// List of tags to filter by. Consists of the following fields:
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// Filter by workspace ID (if empty, include usage all usage for this account). Consists of the following fields:
	// +kubebuilder:validation:Optional
	WorkspaceID []WorkspaceIDParameters `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type TagsInitParameters struct {

	// The key of the tag.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Consists of the following fields:
	Value []ValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {

	// The key of the tag.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Consists of the following fields:
	Value []ValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// The key of the tag.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Consists of the following fields:
	// +kubebuilder:validation:Optional
	Value []ValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ValueInitParameters struct {

	// The operator to use for the filter. (Enum: IN)
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The values to filter by.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ValueObservation struct {

	// The operator to use for the filter. (Enum: IN)
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The values to filter by.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ValueParameters struct {

	// The operator to use for the filter. (Enum: IN)
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The values to filter by.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type WorkspaceIDInitParameters struct {

	// The operator to use for the filter. (Enum: IN)
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The values to filter by.
	Values []*float64 `json:"values,omitempty" tf:"values,omitempty"`
}

type WorkspaceIDObservation struct {

	// The operator to use for the filter. (Enum: IN)
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The values to filter by.
	Values []*float64 `json:"values,omitempty" tf:"values,omitempty"`
}

type WorkspaceIDParameters struct {

	// The operator to use for the filter. (Enum: IN)
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The values to filter by.
	// +kubebuilder:validation:Optional
	Values []*float64 `json:"values,omitempty" tf:"values,omitempty"`
}

// BudgetSpec defines the desired state of Budget
type BudgetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BudgetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BudgetInitParameters `json:"initProvider,omitempty"`
}

// BudgetStatus defines the observed state of Budget.
type BudgetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BudgetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Budget is the Schema for the Budgets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,databricks}
type Budget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BudgetSpec   `json:"spec"`
	Status            BudgetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetList contains a list of Budgets
type BudgetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Budget `json:"items"`
}

// Repository type metadata.
var (
	Budget_Kind             = "Budget"
	Budget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Budget_Kind}.String()
	Budget_KindAPIVersion   = Budget_Kind + "." + CRDGroupVersion.String()
	Budget_GroupVersionKind = CRDGroupVersion.WithKind(Budget_Kind)
)

func init() {
	SchemeBuilder.Register(&Budget{}, &BudgetList{})
}
